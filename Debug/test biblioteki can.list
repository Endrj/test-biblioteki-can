
test biblioteki can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b4c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004cd4  08004cd4  00005cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d2c  08004d2c  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004d2c  08004d2c  00005d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d34  08004d34  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d34  08004d34  00005d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d38  08004d38  00005d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004d3c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000068  08004da4  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08004da4  000062d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011bb9  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000268b  00000000  00000000  00017c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  0001a2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce0  00000000  00000000  0001b370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f75  00000000  00000000  0001c050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013129  00000000  00000000  00043fc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f69df  00000000  00000000  000570ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014dacd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c1c  00000000  00000000  0014db10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0015272c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004cbc 	.word	0x08004cbc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08004cbc 	.word	0x08004cbc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <CAN_Konfiguracja_main>:

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void CAN_Konfiguracja_main(){//To powinno być wywołane w user code begin 2
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	initialize_can();//MX_CAN1_Init();
 80004cc:	f000 f83e 	bl	800054c <initialize_can>


	CAN_Filter_Config(); //
 80004d0:	f000 f816 	bl	8000500 <CAN_Filter_Config>
		if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF ) != HAL_OK)
 80004d4:	f240 4103 	movw	r1, #1027	@ 0x403
 80004d8:	4808      	ldr	r0, [pc, #32]	@ (80004fc <CAN_Konfiguracja_main+0x34>)
 80004da:	f000 fe78 	bl	80011ce <HAL_CAN_ActivateNotification>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <CAN_Konfiguracja_main+0x20>
		{
			Error_Handler();
 80004e4:	f000 f9e2 	bl	80008ac <Error_Handler>
		}

		//Start modułu CAN
		if(HAL_CAN_Start(&hcan1) != HAL_OK)
 80004e8:	4804      	ldr	r0, [pc, #16]	@ (80004fc <CAN_Konfiguracja_main+0x34>)
 80004ea:	f000 fe2c 	bl	8001146 <HAL_CAN_Start>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <CAN_Konfiguracja_main+0x30>
		{
			Error_Handler();
 80004f4:	f000 f9da 	bl	80008ac <Error_Handler>
		}
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20000084 	.word	0x20000084

08000500 <CAN_Filter_Config>:



// ustawienie filtra dla ID ramek CAN
void CAN_Filter_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	@ 0x28
 8000504:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_filter_init;

	can1_filter_init.FilterActivation = ENABLE;
 8000506:	2301      	movs	r3, #1
 8000508:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 800050e:	2300      	movs	r3, #0
 8000510:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x0000;
 8000512:	2300      	movs	r3, #0
 8000514:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 8000516:	2300      	movs	r3, #0
 8000518:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0X0000;
 800051a:	2300      	movs	r3, #0
 800051c:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 8000522:	2300      	movs	r3, #0
 8000524:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 8000526:	2301      	movs	r3, #1
 8000528:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_ConfigFilter(&hcan1, &can1_filter_init) != HAL_OK)
 800052a:	463b      	mov	r3, r7
 800052c:	4619      	mov	r1, r3
 800052e:	4806      	ldr	r0, [pc, #24]	@ (8000548 <CAN_Filter_Config+0x48>)
 8000530:	f000 fd3f 	bl	8000fb2 <HAL_CAN_ConfigFilter>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <CAN_Filter_Config+0x3e>
	{
		Error_Handler();
 800053a:	f000 f9b7 	bl	80008ac <Error_Handler>
	}
}
 800053e:	bf00      	nop
 8000540:	3728      	adds	r7, #40	@ 0x28
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000084 	.word	0x20000084

0800054c <initialize_can>:




//static void MX_CAN1_Init(void){
void initialize_can(){
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  hcan1.Instance = CAN1;
 8000550:	4b17      	ldr	r3, [pc, #92]	@ (80005b0 <initialize_can+0x64>)
 8000552:	4a18      	ldr	r2, [pc, #96]	@ (80005b4 <initialize_can+0x68>)
 8000554:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8000556:	4b16      	ldr	r3, [pc, #88]	@ (80005b0 <initialize_can+0x64>)
 8000558:	220a      	movs	r2, #10
 800055a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800055c:	4b14      	ldr	r3, [pc, #80]	@ (80005b0 <initialize_can+0x64>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000562:	4b13      	ldr	r3, [pc, #76]	@ (80005b0 <initialize_can+0x64>)
 8000564:	2200      	movs	r2, #0
 8000566:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000568:	4b11      	ldr	r3, [pc, #68]	@ (80005b0 <initialize_can+0x64>)
 800056a:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800056e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000570:	4b0f      	ldr	r3, [pc, #60]	@ (80005b0 <initialize_can+0x64>)
 8000572:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000576:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000578:	4b0d      	ldr	r3, [pc, #52]	@ (80005b0 <initialize_can+0x64>)
 800057a:	2200      	movs	r2, #0
 800057c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800057e:	4b0c      	ldr	r3, [pc, #48]	@ (80005b0 <initialize_can+0x64>)
 8000580:	2201      	movs	r2, #1
 8000582:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000584:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <initialize_can+0x64>)
 8000586:	2200      	movs	r2, #0
 8000588:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800058a:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <initialize_can+0x64>)
 800058c:	2201      	movs	r2, #1
 800058e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000590:	4b07      	ldr	r3, [pc, #28]	@ (80005b0 <initialize_can+0x64>)
 8000592:	2200      	movs	r2, #0
 8000594:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000596:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <initialize_can+0x64>)
 8000598:	2200      	movs	r2, #0
 800059a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800059c:	4804      	ldr	r0, [pc, #16]	@ (80005b0 <initialize_can+0x64>)
 800059e:	f000 fc0d 	bl	8000dbc <HAL_CAN_Init>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <initialize_can+0x60>
  {
    Error_Handler();
 80005a8:	f000 f980 	bl	80008ac <Error_Handler>
  }
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000084 	.word	0x20000084
 80005b4:	40006400 	.word	0x40006400

080005b8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	if(ch == "\n")
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	461a      	mov	r2, r3
 80005c4:	4b0b      	ldr	r3, [pc, #44]	@ (80005f4 <__io_putchar+0x3c>)
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d102      	bne.n	80005d0 <__io_putchar+0x18>
	{
		__io_putchar('\r');
 80005ca:	200d      	movs	r0, #13
 80005cc:	f7ff fff4 	bl	80005b8 <__io_putchar>
	}
	HAL_UART_Transmit(&huart2, &ch, (uint8_t)strlen(&ch), HAL_MAX_DELAY);
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff fdf8 	bl	80001c8 <strlen>
 80005d8:	4603      	mov	r3, r0
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	461a      	mov	r2, r3
 80005de:	1d39      	adds	r1, r7, #4
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295
 80005e4:	4804      	ldr	r0, [pc, #16]	@ (80005f8 <__io_putchar+0x40>)
 80005e6:	f003 f965 	bl	80038b4 <HAL_UART_Transmit>
	return 1;
 80005ea:	2301      	movs	r3, #1
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	08004cd4 	.word	0x08004cd4
 80005f8:	200000f8 	.word	0x200000f8

080005fc <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	void CAN_interrupt();
//	printf("1\n");
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	CAN_Konfiguracja_main();
 8000614:	f7ff ff58 	bl	80004c8 <CAN_Konfiguracja_main>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000618:	f000 fb54 	bl	8000cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061c:	f000 f80e 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000620:	f000 f8de 	bl	80007e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000624:	f000 f8ac 	bl	8000780 <MX_USART2_UART_Init>
//  MX_CAN1_Init();
  MX_TIM4_Init();
 8000628:	f000 f85a 	bl	80006e0 <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("hello world\n");
 800062c:	4802      	ldr	r0, [pc, #8]	@ (8000638 <main+0x28>)
 800062e:	f003 ffb1 	bl	8004594 <puts>
  while (1)
 8000632:	bf00      	nop
 8000634:	e7fd      	b.n	8000632 <main+0x22>
 8000636:	bf00      	nop
 8000638:	08004cd8 	.word	0x08004cd8

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b096      	sub	sp, #88	@ 0x58
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	2244      	movs	r2, #68	@ 0x44
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f004 f882 	bl	8004754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	463b      	mov	r3, r7
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800065e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000662:	f001 faeb 	bl	8001c3c <HAL_PWREx_ControlVoltageScaling>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800066c:	f000 f91e 	bl	80008ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000678:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067a:	2310      	movs	r3, #16
 800067c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000682:	2302      	movs	r3, #2
 8000684:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000686:	2301      	movs	r3, #1
 8000688:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800068a:	230a      	movs	r3, #10
 800068c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800068e:	2307      	movs	r3, #7
 8000690:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000696:	2302      	movs	r3, #2
 8000698:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fb22 	bl	8001ce8 <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006aa:	f000 f8ff 	bl	80008ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
 80006b0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2303      	movs	r3, #3
 80006b4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006c2:	463b      	mov	r3, r7
 80006c4:	2104      	movs	r1, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 feea 	bl	80024a0 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006d2:	f000 f8eb 	bl	80008ac <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3758      	adds	r7, #88	@ 0x58
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80006fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000778 <MX_TIM4_Init+0x98>)
 8000700:	4a1e      	ldr	r2, [pc, #120]	@ (800077c <MX_TIM4_Init+0x9c>)
 8000702:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 799;
 8000704:	4b1c      	ldr	r3, [pc, #112]	@ (8000778 <MX_TIM4_Init+0x98>)
 8000706:	f240 321f 	movw	r2, #799	@ 0x31f
 800070a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070c:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <MX_TIM4_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8000712:	4b19      	ldr	r3, [pc, #100]	@ (8000778 <MX_TIM4_Init+0x98>)
 8000714:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000718:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071a:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <MX_TIM4_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000720:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <MX_TIM4_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000726:	4814      	ldr	r0, [pc, #80]	@ (8000778 <MX_TIM4_Init+0x98>)
 8000728:	f002 fd9a 	bl	8003260 <HAL_TIM_Base_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000732:	f000 f8bb 	bl	80008ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000736:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800073a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	4619      	mov	r1, r3
 8000742:	480d      	ldr	r0, [pc, #52]	@ (8000778 <MX_TIM4_Init+0x98>)
 8000744:	f002 fde3 	bl	800330e <HAL_TIM_ConfigClockSource>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800074e:	f000 f8ad 	bl	80008ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	4619      	mov	r1, r3
 800075e:	4806      	ldr	r0, [pc, #24]	@ (8000778 <MX_TIM4_Init+0x98>)
 8000760:	f002 ffd2 	bl	8003708 <HAL_TIMEx_MasterConfigSynchronization>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800076a:	f000 f89f 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	3720      	adds	r7, #32
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200000ac 	.word	0x200000ac
 800077c:	40000800 	.word	0x40000800

08000780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000784:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <MX_USART2_UART_Init+0x58>)
 8000786:	4a15      	ldr	r2, [pc, #84]	@ (80007dc <MX_USART2_UART_Init+0x5c>)
 8000788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078a:	4b13      	ldr	r3, [pc, #76]	@ (80007d8 <MX_USART2_UART_Init+0x58>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_USART2_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <MX_USART2_UART_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <MX_USART2_UART_Init+0x58>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <MX_USART2_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <MX_USART2_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <MX_USART2_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <MX_USART2_UART_Init+0x58>)
 80007c4:	f003 f828 	bl	8003818 <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ce:	f000 f86d 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000f8 	.word	0x200000f8
 80007dc:	40004400 	.word	0x40004400

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	@ 0x28
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	4b2b      	ldr	r3, [pc, #172]	@ (80008a4 <MX_GPIO_Init+0xc4>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fa:	4a2a      	ldr	r2, [pc, #168]	@ (80008a4 <MX_GPIO_Init+0xc4>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000802:	4b28      	ldr	r3, [pc, #160]	@ (80008a4 <MX_GPIO_Init+0xc4>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	4b25      	ldr	r3, [pc, #148]	@ (80008a4 <MX_GPIO_Init+0xc4>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	4a24      	ldr	r2, [pc, #144]	@ (80008a4 <MX_GPIO_Init+0xc4>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000818:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081a:	4b22      	ldr	r3, [pc, #136]	@ (80008a4 <MX_GPIO_Init+0xc4>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b1f      	ldr	r3, [pc, #124]	@ (80008a4 <MX_GPIO_Init+0xc4>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082a:	4a1e      	ldr	r2, [pc, #120]	@ (80008a4 <MX_GPIO_Init+0xc4>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000832:	4b1c      	ldr	r3, [pc, #112]	@ (80008a4 <MX_GPIO_Init+0xc4>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	4b19      	ldr	r3, [pc, #100]	@ (80008a4 <MX_GPIO_Init+0xc4>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000842:	4a18      	ldr	r2, [pc, #96]	@ (80008a4 <MX_GPIO_Init+0xc4>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800084a:	4b16      	ldr	r3, [pc, #88]	@ (80008a4 <MX_GPIO_Init+0xc4>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2120      	movs	r1, #32
 800085a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085e:	f001 f9c7 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000862:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000868:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800086c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	480b      	ldr	r0, [pc, #44]	@ (80008a8 <MX_GPIO_Init+0xc8>)
 800087a:	f001 f80f 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800087e:	2320      	movs	r3, #32
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000898:	f001 f800 	bl	800189c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	@ 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40021000 	.word	0x40021000
 80008a8:	48000800 	.word	0x48000800

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <Error_Handler+0x8>

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <HAL_MspInit+0x44>)
 80008c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008c2:	4a0e      	ldr	r2, [pc, #56]	@ (80008fc <HAL_MspInit+0x44>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80008ca:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <HAL_MspInit+0x44>)
 80008cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <HAL_MspInit+0x44>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008da:	4a08      	ldr	r2, [pc, #32]	@ (80008fc <HAL_MspInit+0x44>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80008e2:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <HAL_MspInit+0x44>)
 80008e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000

08000900 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	@ 0x28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a1c      	ldr	r2, [pc, #112]	@ (8000990 <HAL_CAN_MspInit+0x90>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d131      	bne.n	8000986 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000922:	4b1c      	ldr	r3, [pc, #112]	@ (8000994 <HAL_CAN_MspInit+0x94>)
 8000924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000926:	4a1b      	ldr	r2, [pc, #108]	@ (8000994 <HAL_CAN_MspInit+0x94>)
 8000928:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800092c:	6593      	str	r3, [r2, #88]	@ 0x58
 800092e:	4b19      	ldr	r3, [pc, #100]	@ (8000994 <HAL_CAN_MspInit+0x94>)
 8000930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	4b16      	ldr	r3, [pc, #88]	@ (8000994 <HAL_CAN_MspInit+0x94>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093e:	4a15      	ldr	r2, [pc, #84]	@ (8000994 <HAL_CAN_MspInit+0x94>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000946:	4b13      	ldr	r3, [pc, #76]	@ (8000994 <HAL_CAN_MspInit+0x94>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000952:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000964:	2309      	movs	r3, #9
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4619      	mov	r1, r3
 800096e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000972:	f000 ff93 	bl	800189c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	2014      	movs	r0, #20
 800097c:	f000 ff57 	bl	800182e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000980:	2014      	movs	r0, #20
 8000982:	f000 ff70 	bl	8001866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000986:	bf00      	nop
 8000988:	3728      	adds	r7, #40	@ 0x28
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40006400 	.word	0x40006400
 8000994:	40021000 	.word	0x40021000

08000998 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a0a      	ldr	r2, [pc, #40]	@ (80009d0 <HAL_TIM_Base_MspInit+0x38>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d10b      	bne.n	80009c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80009aa:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <HAL_TIM_Base_MspInit+0x3c>)
 80009ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ae:	4a09      	ldr	r2, [pc, #36]	@ (80009d4 <HAL_TIM_Base_MspInit+0x3c>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80009b6:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <HAL_TIM_Base_MspInit+0x3c>)
 80009b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80009c2:	bf00      	nop
 80009c4:	3714      	adds	r7, #20
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40000800 	.word	0x40000800
 80009d4:	40021000 	.word	0x40021000

080009d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b0ac      	sub	sp, #176	@ 0xb0
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2288      	movs	r2, #136	@ 0x88
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f003 feab 	bl	8004754 <memset>
  if(huart->Instance==USART2)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a21      	ldr	r2, [pc, #132]	@ (8000a88 <HAL_UART_MspInit+0xb0>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d13b      	bne.n	8000a80 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 ff67 	bl	80028e8 <HAL_RCCEx_PeriphCLKConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a20:	f7ff ff44 	bl	80008ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a24:	4b19      	ldr	r3, [pc, #100]	@ (8000a8c <HAL_UART_MspInit+0xb4>)
 8000a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a28:	4a18      	ldr	r2, [pc, #96]	@ (8000a8c <HAL_UART_MspInit+0xb4>)
 8000a2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a30:	4b16      	ldr	r3, [pc, #88]	@ (8000a8c <HAL_UART_MspInit+0xb4>)
 8000a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	4b13      	ldr	r3, [pc, #76]	@ (8000a8c <HAL_UART_MspInit+0xb4>)
 8000a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a40:	4a12      	ldr	r2, [pc, #72]	@ (8000a8c <HAL_UART_MspInit+0xb4>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a48:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <HAL_UART_MspInit+0xb4>)
 8000a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a54:	230c      	movs	r3, #12
 8000a56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a6c:	2307      	movs	r3, #7
 8000a6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a76:	4619      	mov	r1, r3
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a7c:	f000 ff0e 	bl	800189c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a80:	bf00      	nop
 8000a82:	37b0      	adds	r7, #176	@ 0xb0
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40004400 	.word	0x40004400
 8000a8c:	40021000 	.word	0x40021000

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <NMI_Handler+0x4>

08000a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae6:	f000 f949 	bl	8000d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000af4:	4802      	ldr	r0, [pc, #8]	@ (8000b00 <CAN1_RX0_IRQHandler+0x10>)
 8000af6:	f000 fb90 	bl	800121a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000084 	.word	0x20000084

08000b04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	e00a      	b.n	8000b2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b16:	f3af 8000 	nop.w
 8000b1a:	4601      	mov	r1, r0
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	1c5a      	adds	r2, r3, #1
 8000b20:	60ba      	str	r2, [r7, #8]
 8000b22:	b2ca      	uxtb	r2, r1
 8000b24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	697a      	ldr	r2, [r7, #20]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	dbf0      	blt.n	8000b16 <_read+0x12>
  }

  return len;
 8000b34:	687b      	ldr	r3, [r7, #4]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3718      	adds	r7, #24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	60f8      	str	r0, [r7, #12]
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
 8000b4e:	e009      	b.n	8000b64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	60ba      	str	r2, [r7, #8]
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fd2d 	bl	80005b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	3301      	adds	r3, #1
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697a      	ldr	r2, [r7, #20]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	dbf1      	blt.n	8000b50 <_write+0x12>
  }
  return len;
 8000b6c:	687b      	ldr	r3, [r7, #4]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <_close>:

int _close(int file)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b9e:	605a      	str	r2, [r3, #4]
  return 0;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <_isatty>:

int _isatty(int file)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be8:	4a14      	ldr	r2, [pc, #80]	@ (8000c3c <_sbrk+0x5c>)
 8000bea:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <_sbrk+0x60>)
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf4:	4b13      	ldr	r3, [pc, #76]	@ (8000c44 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <_sbrk+0x64>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	@ (8000c48 <_sbrk+0x68>)
 8000c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c02:	4b10      	ldr	r3, [pc, #64]	@ (8000c44 <_sbrk+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d207      	bcs.n	8000c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c10:	f003 fdee 	bl	80047f0 <__errno>
 8000c14:	4603      	mov	r3, r0
 8000c16:	220c      	movs	r2, #12
 8000c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	e009      	b.n	8000c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c20:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c26:	4b07      	ldr	r3, [pc, #28]	@ (8000c44 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4a05      	ldr	r2, [pc, #20]	@ (8000c44 <_sbrk+0x64>)
 8000c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c32:	68fb      	ldr	r3, [r7, #12]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20018000 	.word	0x20018000
 8000c40:	00000400 	.word	0x00000400
 8000c44:	20000180 	.word	0x20000180
 8000c48:	200002d8 	.word	0x200002d8

08000c4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <SystemInit+0x20>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c56:	4a05      	ldr	r2, [pc, #20]	@ (8000c6c <SystemInit+0x20>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ca8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c74:	f7ff ffea 	bl	8000c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c78:	480c      	ldr	r0, [pc, #48]	@ (8000cac <LoopForever+0x6>)
  ldr r1, =_edata
 8000c7a:	490d      	ldr	r1, [pc, #52]	@ (8000cb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb4 <LoopForever+0xe>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c90:	4c0a      	ldr	r4, [pc, #40]	@ (8000cbc <LoopForever+0x16>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f003 fdad 	bl	80047fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ca2:	f7ff fcb5 	bl	8000610 <main>

08000ca6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ca6:	e7fe      	b.n	8000ca6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000cb4:	08004d3c 	.word	0x08004d3c
  ldr r2, =_sbss
 8000cb8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000cbc:	200002d4 	.word	0x200002d4

08000cc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC1_2_IRQHandler>
	...

08000cc4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cce:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <HAL_Init+0x3c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	@ (8000d00 <HAL_Init+0x3c>)
 8000cd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cd8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cda:	2003      	movs	r0, #3
 8000cdc:	f000 fd9c 	bl	8001818 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f000 f80f 	bl	8000d04 <HAL_InitTick>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d002      	beq.n	8000cf2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	71fb      	strb	r3, [r7, #7]
 8000cf0:	e001      	b.n	8000cf6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cf2:	f7ff fde1 	bl	80008b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40022000 	.word	0x40022000

08000d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d10:	4b17      	ldr	r3, [pc, #92]	@ (8000d70 <HAL_InitTick+0x6c>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d023      	beq.n	8000d60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d18:	4b16      	ldr	r3, [pc, #88]	@ (8000d74 <HAL_InitTick+0x70>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b14      	ldr	r3, [pc, #80]	@ (8000d70 <HAL_InitTick+0x6c>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 fda7 	bl	8001882 <HAL_SYSTICK_Config>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10f      	bne.n	8000d5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b0f      	cmp	r3, #15
 8000d3e:	d809      	bhi.n	8000d54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d40:	2200      	movs	r2, #0
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295
 8000d48:	f000 fd71 	bl	800182e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d78 <HAL_InitTick+0x74>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	e007      	b.n	8000d64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	73fb      	strb	r3, [r7, #15]
 8000d58:	e004      	b.n	8000d64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	e001      	b.n	8000d64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000000 	.word	0x20000000
 8000d78:	20000004 	.word	0x20000004

08000d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <HAL_IncTick+0x20>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_IncTick+0x24>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a04      	ldr	r2, [pc, #16]	@ (8000da0 <HAL_IncTick+0x24>)
 8000d8e:	6013      	str	r3, [r2, #0]
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	20000184 	.word	0x20000184

08000da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b03      	ldr	r3, [pc, #12]	@ (8000db8 <HAL_GetTick+0x14>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000184 	.word	0x20000184

08000dbc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d101      	bne.n	8000dce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e0ed      	b.n	8000faa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d102      	bne.n	8000de0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff fd90 	bl	8000900 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f042 0201 	orr.w	r2, r2, #1
 8000dee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000df0:	f7ff ffd8 	bl	8000da4 <HAL_GetTick>
 8000df4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000df6:	e012      	b.n	8000e1e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000df8:	f7ff ffd4 	bl	8000da4 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b0a      	cmp	r3, #10
 8000e04:	d90b      	bls.n	8000e1e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e0a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2205      	movs	r2, #5
 8000e16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e0c5      	b.n	8000faa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d0e5      	beq.n	8000df8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 0202 	bic.w	r2, r2, #2
 8000e3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e3c:	f7ff ffb2 	bl	8000da4 <HAL_GetTick>
 8000e40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e42:	e012      	b.n	8000e6a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e44:	f7ff ffae 	bl	8000da4 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b0a      	cmp	r3, #10
 8000e50:	d90b      	bls.n	8000e6a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e56:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2205      	movs	r2, #5
 8000e62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e09f      	b.n	8000faa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d1e5      	bne.n	8000e44 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	7e1b      	ldrb	r3, [r3, #24]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d108      	bne.n	8000e92 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	e007      	b.n	8000ea2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ea0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	7e5b      	ldrb	r3, [r3, #25]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d108      	bne.n	8000ebc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	e007      	b.n	8000ecc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000eca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	7e9b      	ldrb	r3, [r3, #26]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d108      	bne.n	8000ee6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f042 0220 	orr.w	r2, r2, #32
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	e007      	b.n	8000ef6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f022 0220 	bic.w	r2, r2, #32
 8000ef4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	7edb      	ldrb	r3, [r3, #27]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d108      	bne.n	8000f10 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 0210 	bic.w	r2, r2, #16
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	e007      	b.n	8000f20 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f042 0210 	orr.w	r2, r2, #16
 8000f1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	7f1b      	ldrb	r3, [r3, #28]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d108      	bne.n	8000f3a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f042 0208 	orr.w	r2, r2, #8
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	e007      	b.n	8000f4a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f022 0208 	bic.w	r2, r2, #8
 8000f48:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	7f5b      	ldrb	r3, [r3, #29]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d108      	bne.n	8000f64 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f042 0204 	orr.w	r2, r2, #4
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	e007      	b.n	8000f74 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f022 0204 	bic.w	r2, r2, #4
 8000f72:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	431a      	orrs	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	ea42 0103 	orr.w	r1, r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	1e5a      	subs	r2, r3, #1
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	430a      	orrs	r2, r1
 8000f98:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b087      	sub	sp, #28
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fc8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000fca:	7cfb      	ldrb	r3, [r7, #19]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d003      	beq.n	8000fd8 <HAL_CAN_ConfigFilter+0x26>
 8000fd0:	7cfb      	ldrb	r3, [r7, #19]
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	f040 80aa 	bne.w	800112c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000fde:	f043 0201 	orr.w	r2, r3, #1
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	f003 031f 	and.w	r3, r3, #31
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	43db      	mvns	r3, r3
 8001002:	401a      	ands	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d123      	bne.n	800105a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	43db      	mvns	r3, r3
 800101c:	401a      	ands	r2, r3
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001034:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	3248      	adds	r2, #72	@ 0x48
 800103a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800104e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001050:	6979      	ldr	r1, [r7, #20]
 8001052:	3348      	adds	r3, #72	@ 0x48
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	440b      	add	r3, r1
 8001058:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d122      	bne.n	80010a8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	431a      	orrs	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001082:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	3248      	adds	r2, #72	@ 0x48
 8001088:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800109c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800109e:	6979      	ldr	r1, [r7, #20]
 80010a0:	3348      	adds	r3, #72	@ 0x48
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	440b      	add	r3, r1
 80010a6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d109      	bne.n	80010c4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	401a      	ands	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80010c2:	e007      	b.n	80010d4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	431a      	orrs	r2, r3
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d109      	bne.n	80010f0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80010ee:	e007      	b.n	8001100 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	431a      	orrs	r2, r3
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	6a1b      	ldr	r3, [r3, #32]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d107      	bne.n	8001118 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	431a      	orrs	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800111e:	f023 0201 	bic.w	r2, r3, #1
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001128:	2300      	movs	r3, #0
 800112a:	e006      	b.n	800113a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001130:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
  }
}
 800113a:	4618      	mov	r0, r3
 800113c:	371c      	adds	r7, #28
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b084      	sub	sp, #16
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b01      	cmp	r3, #1
 8001158:	d12e      	bne.n	80011b8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2202      	movs	r2, #2
 800115e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0201 	bic.w	r2, r2, #1
 8001170:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001172:	f7ff fe17 	bl	8000da4 <HAL_GetTick>
 8001176:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001178:	e012      	b.n	80011a0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800117a:	f7ff fe13 	bl	8000da4 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b0a      	cmp	r3, #10
 8001186:	d90b      	bls.n	80011a0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800118c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2205      	movs	r2, #5
 8001198:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e012      	b.n	80011c6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1e5      	bne.n	800117a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80011b4:	2300      	movs	r3, #0
 80011b6:	e006      	b.n	80011c6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011bc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
  }
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b085      	sub	sp, #20
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011de:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d002      	beq.n	80011ec <HAL_CAN_ActivateNotification+0x1e>
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d109      	bne.n	8001200 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6959      	ldr	r1, [r3, #20]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	e006      	b.n	800120e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001204:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
  }
}
 800120e:	4618      	mov	r0, r3
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b08a      	sub	sp, #40	@ 0x28
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001256:	6a3b      	ldr	r3, [r7, #32]
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b00      	cmp	r3, #0
 800125e:	d07c      	beq.n	800135a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d023      	beq.n	80012b2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2201      	movs	r2, #1
 8001270:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 f983 	bl	8001588 <HAL_CAN_TxMailbox0CompleteCallback>
 8001282:	e016      	b.n	80012b2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	2b00      	cmp	r3, #0
 800128c:	d004      	beq.n	8001298 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001290:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
 8001296:	e00c      	b.n	80012b2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d004      	beq.n	80012ac <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80012a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80012aa:	e002      	b.n	80012b2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 f989 	bl	80015c4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d024      	beq.n	8001306 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 f963 	bl	800159c <HAL_CAN_TxMailbox1CompleteCallback>
 80012d6:	e016      	b.n	8001306 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d004      	beq.n	80012ec <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80012e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80012ea:	e00c      	b.n	8001306 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d004      	beq.n	8001300 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80012f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80012fe:	e002      	b.n	8001306 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f969 	bl	80015d8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d024      	beq.n	800135a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001318:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 f943 	bl	80015b0 <HAL_CAN_TxMailbox2CompleteCallback>
 800132a:	e016      	b.n	800135a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d004      	beq.n	8001340 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001338:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
 800133e:	e00c      	b.n	800135a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d004      	beq.n	8001354 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800134a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
 8001352:	e002      	b.n	800135a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 f949 	bl	80015ec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800135a:	6a3b      	ldr	r3, [r7, #32]
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00c      	beq.n	800137e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f003 0310 	and.w	r3, r3, #16
 800136a:	2b00      	cmp	r3, #0
 800136c:	d007      	beq.n	800137e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001370:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2210      	movs	r2, #16
 800137c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800137e:	6a3b      	ldr	r3, [r7, #32]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00b      	beq.n	80013a0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	2b00      	cmp	r3, #0
 8001390:	d006      	beq.n	80013a0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2208      	movs	r2, #8
 8001398:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f930 	bl	8001600 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80013a0:	6a3b      	ldr	r3, [r7, #32]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d009      	beq.n	80013be <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff f91f 	bl	80005fc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80013be:	6a3b      	ldr	r3, [r7, #32]
 80013c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00c      	beq.n	80013e2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	f003 0310 	and.w	r3, r3, #16
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d007      	beq.n	80013e2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80013d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2210      	movs	r2, #16
 80013e0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80013e2:	6a3b      	ldr	r3, [r7, #32]
 80013e4:	f003 0320 	and.w	r3, r3, #32
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00b      	beq.n	8001404 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d006      	beq.n	8001404 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2208      	movs	r2, #8
 80013fc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 f912 	bl	8001628 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001404:	6a3b      	ldr	r3, [r7, #32]
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	2b00      	cmp	r3, #0
 800140c:	d009      	beq.n	8001422 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d002      	beq.n	8001422 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 f8f9 	bl	8001614 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001422:	6a3b      	ldr	r3, [r7, #32]
 8001424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00b      	beq.n	8001444 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	2b00      	cmp	r3, #0
 8001434:	d006      	beq.n	8001444 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2210      	movs	r2, #16
 800143c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f8fc 	bl	800163c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001444:	6a3b      	ldr	r3, [r7, #32]
 8001446:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00b      	beq.n	8001466 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	f003 0308 	and.w	r3, r3, #8
 8001454:	2b00      	cmp	r3, #0
 8001456:	d006      	beq.n	8001466 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2208      	movs	r2, #8
 800145e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f000 f8f5 	bl	8001650 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001466:	6a3b      	ldr	r3, [r7, #32]
 8001468:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d07b      	beq.n	8001568 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	2b00      	cmp	r3, #0
 8001478:	d072      	beq.n	8001560 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800147a:	6a3b      	ldr	r3, [r7, #32]
 800147c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001480:	2b00      	cmp	r3, #0
 8001482:	d008      	beq.n	8001496 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800148e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800149c:	2b00      	cmp	r3, #0
 800149e:	d008      	beq.n	80014b2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80014aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d008      	beq.n	80014ce <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80014c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014ce:	6a3b      	ldr	r3, [r7, #32]
 80014d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d043      	beq.n	8001560 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d03e      	beq.n	8001560 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80014e8:	2b60      	cmp	r3, #96	@ 0x60
 80014ea:	d02b      	beq.n	8001544 <HAL_CAN_IRQHandler+0x32a>
 80014ec:	2b60      	cmp	r3, #96	@ 0x60
 80014ee:	d82e      	bhi.n	800154e <HAL_CAN_IRQHandler+0x334>
 80014f0:	2b50      	cmp	r3, #80	@ 0x50
 80014f2:	d022      	beq.n	800153a <HAL_CAN_IRQHandler+0x320>
 80014f4:	2b50      	cmp	r3, #80	@ 0x50
 80014f6:	d82a      	bhi.n	800154e <HAL_CAN_IRQHandler+0x334>
 80014f8:	2b40      	cmp	r3, #64	@ 0x40
 80014fa:	d019      	beq.n	8001530 <HAL_CAN_IRQHandler+0x316>
 80014fc:	2b40      	cmp	r3, #64	@ 0x40
 80014fe:	d826      	bhi.n	800154e <HAL_CAN_IRQHandler+0x334>
 8001500:	2b30      	cmp	r3, #48	@ 0x30
 8001502:	d010      	beq.n	8001526 <HAL_CAN_IRQHandler+0x30c>
 8001504:	2b30      	cmp	r3, #48	@ 0x30
 8001506:	d822      	bhi.n	800154e <HAL_CAN_IRQHandler+0x334>
 8001508:	2b10      	cmp	r3, #16
 800150a:	d002      	beq.n	8001512 <HAL_CAN_IRQHandler+0x2f8>
 800150c:	2b20      	cmp	r3, #32
 800150e:	d005      	beq.n	800151c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001510:	e01d      	b.n	800154e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001514:	f043 0308 	orr.w	r3, r3, #8
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800151a:	e019      	b.n	8001550 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151e:	f043 0310 	orr.w	r3, r3, #16
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001524:	e014      	b.n	8001550 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001528:	f043 0320 	orr.w	r3, r3, #32
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800152e:	e00f      	b.n	8001550 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001536:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001538:	e00a      	b.n	8001550 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800153a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001542:	e005      	b.n	8001550 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800154a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800154c:	e000      	b.n	8001550 <HAL_CAN_IRQHandler+0x336>
            break;
 800154e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	699a      	ldr	r2, [r3, #24]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800155e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2204      	movs	r2, #4
 8001566:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156a:	2b00      	cmp	r3, #0
 800156c:	d008      	beq.n	8001580 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f872 	bl	8001664 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001580:	bf00      	nop
 8001582:	3728      	adds	r7, #40	@ 0x28
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001688:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001694:	4013      	ands	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016aa:	4a04      	ldr	r2, [pc, #16]	@ (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	60d3      	str	r3, [r2, #12]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c4:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <__NVIC_GetPriorityGrouping+0x18>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	f003 0307 	and.w	r3, r3, #7
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	db0b      	blt.n	8001706 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	f003 021f 	and.w	r2, r3, #31
 80016f4:	4907      	ldr	r1, [pc, #28]	@ (8001714 <__NVIC_EnableIRQ+0x38>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	2001      	movs	r0, #1
 80016fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000e100 	.word	0xe000e100

08001718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	2b00      	cmp	r3, #0
 800172a:	db0a      	blt.n	8001742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	490c      	ldr	r1, [pc, #48]	@ (8001764 <__NVIC_SetPriority+0x4c>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	0112      	lsls	r2, r2, #4
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	440b      	add	r3, r1
 800173c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001740:	e00a      	b.n	8001758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4908      	ldr	r1, [pc, #32]	@ (8001768 <__NVIC_SetPriority+0x50>)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	3b04      	subs	r3, #4
 8001750:	0112      	lsls	r2, r2, #4
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	440b      	add	r3, r1
 8001756:	761a      	strb	r2, [r3, #24]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	@ 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f1c3 0307 	rsb	r3, r3, #7
 8001786:	2b04      	cmp	r3, #4
 8001788:	bf28      	it	cs
 800178a:	2304      	movcs	r3, #4
 800178c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3304      	adds	r3, #4
 8001792:	2b06      	cmp	r3, #6
 8001794:	d902      	bls.n	800179c <NVIC_EncodePriority+0x30>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3b03      	subs	r3, #3
 800179a:	e000      	b.n	800179e <NVIC_EncodePriority+0x32>
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	43d9      	mvns	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	4313      	orrs	r3, r2
         );
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3724      	adds	r7, #36	@ 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017e4:	d301      	bcc.n	80017ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00f      	b.n	800180a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <SysTick_Config+0x40>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f2:	210f      	movs	r1, #15
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	f7ff ff8e 	bl	8001718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017fc:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <SysTick_Config+0x40>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001802:	4b04      	ldr	r3, [pc, #16]	@ (8001814 <SysTick_Config+0x40>)
 8001804:	2207      	movs	r2, #7
 8001806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	e000e010 	.word	0xe000e010

08001818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ff29 	bl	8001678 <__NVIC_SetPriorityGrouping>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001840:	f7ff ff3e 	bl	80016c0 <__NVIC_GetPriorityGrouping>
 8001844:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	6978      	ldr	r0, [r7, #20]
 800184c:	f7ff ff8e 	bl	800176c <NVIC_EncodePriority>
 8001850:	4602      	mov	r2, r0
 8001852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff5d 	bl	8001718 <__NVIC_SetPriority>
}
 800185e:	bf00      	nop
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	4603      	mov	r3, r0
 800186e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff31 	bl	80016dc <__NVIC_EnableIRQ>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff ffa2 	bl	80017d4 <SysTick_Config>
 8001890:	4603      	mov	r3, r0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018aa:	e17f      	b.n	8001bac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	2101      	movs	r1, #1
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	fa01 f303 	lsl.w	r3, r1, r3
 80018b8:	4013      	ands	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 8171 	beq.w	8001ba6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d005      	beq.n	80018dc <HAL_GPIO_Init+0x40>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d130      	bne.n	800193e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	2203      	movs	r2, #3
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68da      	ldr	r2, [r3, #12]
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001912:	2201      	movs	r2, #1
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	091b      	lsrs	r3, r3, #4
 8001928:	f003 0201 	and.w	r2, r3, #1
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	2b03      	cmp	r3, #3
 8001948:	d118      	bne.n	800197c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800194e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001950:	2201      	movs	r2, #1
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	08db      	lsrs	r3, r3, #3
 8001966:	f003 0201 	and.w	r2, r3, #1
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b03      	cmp	r3, #3
 8001986:	d017      	beq.n	80019b8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d123      	bne.n	8001a0c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	08da      	lsrs	r2, r3, #3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3208      	adds	r2, #8
 80019cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	220f      	movs	r2, #15
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	08da      	lsrs	r2, r3, #3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3208      	adds	r2, #8
 8001a06:	6939      	ldr	r1, [r7, #16]
 8001a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0203 	and.w	r2, r3, #3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80ac 	beq.w	8001ba6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4e:	4b5f      	ldr	r3, [pc, #380]	@ (8001bcc <HAL_GPIO_Init+0x330>)
 8001a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a52:	4a5e      	ldr	r2, [pc, #376]	@ (8001bcc <HAL_GPIO_Init+0x330>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a5a:	4b5c      	ldr	r3, [pc, #368]	@ (8001bcc <HAL_GPIO_Init+0x330>)
 8001a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a66:	4a5a      	ldr	r2, [pc, #360]	@ (8001bd0 <HAL_GPIO_Init+0x334>)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	089b      	lsrs	r3, r3, #2
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a72:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	220f      	movs	r2, #15
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a90:	d025      	beq.n	8001ade <HAL_GPIO_Init+0x242>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4f      	ldr	r2, [pc, #316]	@ (8001bd4 <HAL_GPIO_Init+0x338>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d01f      	beq.n	8001ada <HAL_GPIO_Init+0x23e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4e      	ldr	r2, [pc, #312]	@ (8001bd8 <HAL_GPIO_Init+0x33c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d019      	beq.n	8001ad6 <HAL_GPIO_Init+0x23a>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4d      	ldr	r2, [pc, #308]	@ (8001bdc <HAL_GPIO_Init+0x340>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d013      	beq.n	8001ad2 <HAL_GPIO_Init+0x236>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4c      	ldr	r2, [pc, #304]	@ (8001be0 <HAL_GPIO_Init+0x344>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d00d      	beq.n	8001ace <HAL_GPIO_Init+0x232>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4b      	ldr	r2, [pc, #300]	@ (8001be4 <HAL_GPIO_Init+0x348>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d007      	beq.n	8001aca <HAL_GPIO_Init+0x22e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4a      	ldr	r2, [pc, #296]	@ (8001be8 <HAL_GPIO_Init+0x34c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d101      	bne.n	8001ac6 <HAL_GPIO_Init+0x22a>
 8001ac2:	2306      	movs	r3, #6
 8001ac4:	e00c      	b.n	8001ae0 <HAL_GPIO_Init+0x244>
 8001ac6:	2307      	movs	r3, #7
 8001ac8:	e00a      	b.n	8001ae0 <HAL_GPIO_Init+0x244>
 8001aca:	2305      	movs	r3, #5
 8001acc:	e008      	b.n	8001ae0 <HAL_GPIO_Init+0x244>
 8001ace:	2304      	movs	r3, #4
 8001ad0:	e006      	b.n	8001ae0 <HAL_GPIO_Init+0x244>
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e004      	b.n	8001ae0 <HAL_GPIO_Init+0x244>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e002      	b.n	8001ae0 <HAL_GPIO_Init+0x244>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_GPIO_Init+0x244>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	f002 0203 	and.w	r2, r2, #3
 8001ae6:	0092      	lsls	r2, r2, #2
 8001ae8:	4093      	lsls	r3, r2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001af0:	4937      	ldr	r1, [pc, #220]	@ (8001bd0 <HAL_GPIO_Init+0x334>)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	089b      	lsrs	r3, r3, #2
 8001af6:	3302      	adds	r3, #2
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001afe:	4b3b      	ldr	r3, [pc, #236]	@ (8001bec <HAL_GPIO_Init+0x350>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b22:	4a32      	ldr	r2, [pc, #200]	@ (8001bec <HAL_GPIO_Init+0x350>)
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b28:	4b30      	ldr	r3, [pc, #192]	@ (8001bec <HAL_GPIO_Init+0x350>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b4c:	4a27      	ldr	r2, [pc, #156]	@ (8001bec <HAL_GPIO_Init+0x350>)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b52:	4b26      	ldr	r3, [pc, #152]	@ (8001bec <HAL_GPIO_Init+0x350>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b76:	4a1d      	ldr	r2, [pc, #116]	@ (8001bec <HAL_GPIO_Init+0x350>)
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <HAL_GPIO_Init+0x350>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ba0:	4a12      	ldr	r2, [pc, #72]	@ (8001bec <HAL_GPIO_Init+0x350>)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f47f ae78 	bne.w	80018ac <HAL_GPIO_Init+0x10>
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	371c      	adds	r7, #28
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40010000 	.word	0x40010000
 8001bd4:	48000400 	.word	0x48000400
 8001bd8:	48000800 	.word	0x48000800
 8001bdc:	48000c00 	.word	0x48000c00
 8001be0:	48001000 	.word	0x48001000
 8001be4:	48001400 	.word	0x48001400
 8001be8:	48001800 	.word	0x48001800
 8001bec:	40010400 	.word	0x40010400

08001bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c00:	787b      	ldrb	r3, [r7, #1]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c0c:	e002      	b.n	8001c14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c0e:	887a      	ldrh	r2, [r7, #2]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c24:	4b04      	ldr	r3, [pc, #16]	@ (8001c38 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40007000 	.word	0x40007000

08001c3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c4a:	d130      	bne.n	8001cae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c4c:	4b23      	ldr	r3, [pc, #140]	@ (8001cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c58:	d038      	beq.n	8001ccc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c5a:	4b20      	ldr	r3, [pc, #128]	@ (8001cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c62:	4a1e      	ldr	r2, [pc, #120]	@ (8001cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c68:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2232      	movs	r2, #50	@ 0x32
 8001c70:	fb02 f303 	mul.w	r3, r2, r3
 8001c74:	4a1b      	ldr	r2, [pc, #108]	@ (8001ce4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c76:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7a:	0c9b      	lsrs	r3, r3, #18
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c80:	e002      	b.n	8001c88 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c88:	4b14      	ldr	r3, [pc, #80]	@ (8001cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c94:	d102      	bne.n	8001c9c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f2      	bne.n	8001c82 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ca4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ca8:	d110      	bne.n	8001ccc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e00f      	b.n	8001cce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cae:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001cb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cba:	d007      	beq.n	8001ccc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cbc:	4b07      	ldr	r3, [pc, #28]	@ (8001cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cc4:	4a05      	ldr	r2, [pc, #20]	@ (8001cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40007000 	.word	0x40007000
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	431bde83 	.word	0x431bde83

08001ce8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e3ca      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cfa:	4b97      	ldr	r3, [pc, #604]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d04:	4b94      	ldr	r3, [pc, #592]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 80e4 	beq.w	8001ee4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d007      	beq.n	8001d32 <HAL_RCC_OscConfig+0x4a>
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	2b0c      	cmp	r3, #12
 8001d26:	f040 808b 	bne.w	8001e40 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	f040 8087 	bne.w	8001e40 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d32:	4b89      	ldr	r3, [pc, #548]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d005      	beq.n	8001d4a <HAL_RCC_OscConfig+0x62>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e3a2      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1a      	ldr	r2, [r3, #32]
 8001d4e:	4b82      	ldr	r3, [pc, #520]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d004      	beq.n	8001d64 <HAL_RCC_OscConfig+0x7c>
 8001d5a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d62:	e005      	b.n	8001d70 <HAL_RCC_OscConfig+0x88>
 8001d64:	4b7c      	ldr	r3, [pc, #496]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d6a:	091b      	lsrs	r3, r3, #4
 8001d6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d223      	bcs.n	8001dbc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 fd55 	bl	8002828 <RCC_SetFlashLatencyFromMSIRange>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e383      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d88:	4b73      	ldr	r3, [pc, #460]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a72      	ldr	r2, [pc, #456]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001d8e:	f043 0308 	orr.w	r3, r3, #8
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	4b70      	ldr	r3, [pc, #448]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	496d      	ldr	r1, [pc, #436]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001da6:	4b6c      	ldr	r3, [pc, #432]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	021b      	lsls	r3, r3, #8
 8001db4:	4968      	ldr	r1, [pc, #416]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	604b      	str	r3, [r1, #4]
 8001dba:	e025      	b.n	8001e08 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dbc:	4b66      	ldr	r3, [pc, #408]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a65      	ldr	r2, [pc, #404]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001dc2:	f043 0308 	orr.w	r3, r3, #8
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b63      	ldr	r3, [pc, #396]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	4960      	ldr	r1, [pc, #384]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dda:	4b5f      	ldr	r3, [pc, #380]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	021b      	lsls	r3, r3, #8
 8001de8:	495b      	ldr	r1, [pc, #364]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d109      	bne.n	8001e08 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 fd15 	bl	8002828 <RCC_SetFlashLatencyFromMSIRange>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e343      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e08:	f000 fc4a 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	4b52      	ldr	r3, [pc, #328]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	091b      	lsrs	r3, r3, #4
 8001e14:	f003 030f 	and.w	r3, r3, #15
 8001e18:	4950      	ldr	r1, [pc, #320]	@ (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001e1a:	5ccb      	ldrb	r3, [r1, r3]
 8001e1c:	f003 031f 	and.w	r3, r3, #31
 8001e20:	fa22 f303 	lsr.w	r3, r2, r3
 8001e24:	4a4e      	ldr	r2, [pc, #312]	@ (8001f60 <HAL_RCC_OscConfig+0x278>)
 8001e26:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e28:	4b4e      	ldr	r3, [pc, #312]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe ff69 	bl	8000d04 <HAL_InitTick>
 8001e32:	4603      	mov	r3, r0
 8001e34:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d052      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	e327      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d032      	beq.n	8001eae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e48:	4b43      	ldr	r3, [pc, #268]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a42      	ldr	r2, [pc, #264]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e54:	f7fe ffa6 	bl	8000da4 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e5c:	f7fe ffa2 	bl	8000da4 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e310      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e6e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e7a:	4b37      	ldr	r3, [pc, #220]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a36      	ldr	r2, [pc, #216]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e80:	f043 0308 	orr.w	r3, r3, #8
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	4b34      	ldr	r3, [pc, #208]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	4931      	ldr	r1, [pc, #196]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e98:	4b2f      	ldr	r3, [pc, #188]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	492c      	ldr	r1, [pc, #176]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	604b      	str	r3, [r1, #4]
 8001eac:	e01a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001eae:	4b2a      	ldr	r3, [pc, #168]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a29      	ldr	r2, [pc, #164]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001eb4:	f023 0301 	bic.w	r3, r3, #1
 8001eb8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001eba:	f7fe ff73 	bl	8000da4 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ec2:	f7fe ff6f 	bl	8000da4 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e2dd      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ed4:	4b20      	ldr	r3, [pc, #128]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f0      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x1da>
 8001ee0:	e000      	b.n	8001ee4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ee2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d074      	beq.n	8001fda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d005      	beq.n	8001f02 <HAL_RCC_OscConfig+0x21a>
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	2b0c      	cmp	r3, #12
 8001efa:	d10e      	bne.n	8001f1a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d10b      	bne.n	8001f1a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f02:	4b15      	ldr	r3, [pc, #84]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d064      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x2f0>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d160      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e2ba      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f22:	d106      	bne.n	8001f32 <HAL_RCC_OscConfig+0x24a>
 8001f24:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0b      	ldr	r2, [pc, #44]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001f2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	e026      	b.n	8001f80 <HAL_RCC_OscConfig+0x298>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f3a:	d115      	bne.n	8001f68 <HAL_RCC_OscConfig+0x280>
 8001f3c:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a05      	ldr	r2, [pc, #20]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001f42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	4b03      	ldr	r3, [pc, #12]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a02      	ldr	r2, [pc, #8]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	e014      	b.n	8001f80 <HAL_RCC_OscConfig+0x298>
 8001f56:	bf00      	nop
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	08004ce4 	.word	0x08004ce4
 8001f60:	20000000 	.word	0x20000000
 8001f64:	20000004 	.word	0x20000004
 8001f68:	4ba0      	ldr	r3, [pc, #640]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a9f      	ldr	r2, [pc, #636]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8001f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	4b9d      	ldr	r3, [pc, #628]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a9c      	ldr	r2, [pc, #624]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8001f7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d013      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f88:	f7fe ff0c 	bl	8000da4 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f90:	f7fe ff08 	bl	8000da4 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b64      	cmp	r3, #100	@ 0x64
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e276      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fa2:	4b92      	ldr	r3, [pc, #584]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f0      	beq.n	8001f90 <HAL_RCC_OscConfig+0x2a8>
 8001fae:	e014      	b.n	8001fda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7fe fef8 	bl	8000da4 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb8:	f7fe fef4 	bl	8000da4 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b64      	cmp	r3, #100	@ 0x64
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e262      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fca:	4b88      	ldr	r3, [pc, #544]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x2d0>
 8001fd6:	e000      	b.n	8001fda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d060      	beq.n	80020a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d005      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x310>
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	2b0c      	cmp	r3, #12
 8001ff0:	d119      	bne.n	8002026 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d116      	bne.n	8002026 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ff8:	4b7c      	ldr	r3, [pc, #496]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_OscConfig+0x328>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e23f      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002010:	4b76      	ldr	r3, [pc, #472]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	061b      	lsls	r3, r3, #24
 800201e:	4973      	ldr	r1, [pc, #460]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8002020:	4313      	orrs	r3, r2
 8002022:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002024:	e040      	b.n	80020a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d023      	beq.n	8002076 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800202e:	4b6f      	ldr	r3, [pc, #444]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a6e      	ldr	r2, [pc, #440]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8002034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203a:	f7fe feb3 	bl	8000da4 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002042:	f7fe feaf 	bl	8000da4 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e21d      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002054:	4b65      	ldr	r3, [pc, #404]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0f0      	beq.n	8002042 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002060:	4b62      	ldr	r3, [pc, #392]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	061b      	lsls	r3, r3, #24
 800206e:	495f      	ldr	r1, [pc, #380]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8002070:	4313      	orrs	r3, r2
 8002072:	604b      	str	r3, [r1, #4]
 8002074:	e018      	b.n	80020a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002076:	4b5d      	ldr	r3, [pc, #372]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a5c      	ldr	r2, [pc, #368]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 800207c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002082:	f7fe fe8f 	bl	8000da4 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208a:	f7fe fe8b 	bl	8000da4 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e1f9      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800209c:	4b53      	ldr	r3, [pc, #332]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f0      	bne.n	800208a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d03c      	beq.n	800212e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d01c      	beq.n	80020f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020bc:	4b4b      	ldr	r3, [pc, #300]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 80020be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020c2:	4a4a      	ldr	r2, [pc, #296]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020cc:	f7fe fe6a 	bl	8000da4 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d4:	f7fe fe66 	bl	8000da4 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e1d4      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020e6:	4b41      	ldr	r3, [pc, #260]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 80020e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0ef      	beq.n	80020d4 <HAL_RCC_OscConfig+0x3ec>
 80020f4:	e01b      	b.n	800212e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f6:	4b3d      	ldr	r3, [pc, #244]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 80020f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020fc:	4a3b      	ldr	r2, [pc, #236]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 80020fe:	f023 0301 	bic.w	r3, r3, #1
 8002102:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002106:	f7fe fe4d 	bl	8000da4 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800210e:	f7fe fe49 	bl	8000da4 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e1b7      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002120:	4b32      	ldr	r3, [pc, #200]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8002122:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1ef      	bne.n	800210e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80a6 	beq.w	8002288 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800213c:	2300      	movs	r3, #0
 800213e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002140:	4b2a      	ldr	r3, [pc, #168]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8002142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10d      	bne.n	8002168 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214c:	4b27      	ldr	r3, [pc, #156]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 800214e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002150:	4a26      	ldr	r2, [pc, #152]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8002152:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002156:	6593      	str	r3, [r2, #88]	@ 0x58
 8002158:	4b24      	ldr	r3, [pc, #144]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 800215a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002164:	2301      	movs	r3, #1
 8002166:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002168:	4b21      	ldr	r3, [pc, #132]	@ (80021f0 <HAL_RCC_OscConfig+0x508>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	d118      	bne.n	80021a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002174:	4b1e      	ldr	r3, [pc, #120]	@ (80021f0 <HAL_RCC_OscConfig+0x508>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a1d      	ldr	r2, [pc, #116]	@ (80021f0 <HAL_RCC_OscConfig+0x508>)
 800217a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800217e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002180:	f7fe fe10 	bl	8000da4 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002188:	f7fe fe0c 	bl	8000da4 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e17a      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800219a:	4b15      	ldr	r3, [pc, #84]	@ (80021f0 <HAL_RCC_OscConfig+0x508>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d108      	bne.n	80021c0 <HAL_RCC_OscConfig+0x4d8>
 80021ae:	4b0f      	ldr	r3, [pc, #60]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 80021b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b4:	4a0d      	ldr	r2, [pc, #52]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021be:	e029      	b.n	8002214 <HAL_RCC_OscConfig+0x52c>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b05      	cmp	r3, #5
 80021c6:	d115      	bne.n	80021f4 <HAL_RCC_OscConfig+0x50c>
 80021c8:	4b08      	ldr	r3, [pc, #32]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ce:	4a07      	ldr	r2, [pc, #28]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 80021d0:	f043 0304 	orr.w	r3, r3, #4
 80021d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021d8:	4b04      	ldr	r3, [pc, #16]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021de:	4a03      	ldr	r2, [pc, #12]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021e8:	e014      	b.n	8002214 <HAL_RCC_OscConfig+0x52c>
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40007000 	.word	0x40007000
 80021f4:	4b9c      	ldr	r3, [pc, #624]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 80021f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021fa:	4a9b      	ldr	r2, [pc, #620]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002204:	4b98      	ldr	r3, [pc, #608]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800220a:	4a97      	ldr	r2, [pc, #604]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 800220c:	f023 0304 	bic.w	r3, r3, #4
 8002210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d016      	beq.n	800224a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221c:	f7fe fdc2 	bl	8000da4 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002222:	e00a      	b.n	800223a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002224:	f7fe fdbe 	bl	8000da4 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e12a      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800223a:	4b8b      	ldr	r3, [pc, #556]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 800223c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0ed      	beq.n	8002224 <HAL_RCC_OscConfig+0x53c>
 8002248:	e015      	b.n	8002276 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224a:	f7fe fdab 	bl	8000da4 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002250:	e00a      	b.n	8002268 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002252:	f7fe fda7 	bl	8000da4 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002260:	4293      	cmp	r3, r2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e113      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002268:	4b7f      	ldr	r3, [pc, #508]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1ed      	bne.n	8002252 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002276:	7ffb      	ldrb	r3, [r7, #31]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d105      	bne.n	8002288 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800227c:	4b7a      	ldr	r3, [pc, #488]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002280:	4a79      	ldr	r2, [pc, #484]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 8002282:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002286:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 80fe 	beq.w	800248e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002296:	2b02      	cmp	r3, #2
 8002298:	f040 80d0 	bne.w	800243c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800229c:	4b72      	ldr	r3, [pc, #456]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f003 0203 	and.w	r2, r3, #3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d130      	bne.n	8002312 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	3b01      	subs	r3, #1
 80022bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d127      	bne.n	8002312 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d11f      	bne.n	8002312 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80022dc:	2a07      	cmp	r2, #7
 80022de:	bf14      	ite	ne
 80022e0:	2201      	movne	r2, #1
 80022e2:	2200      	moveq	r2, #0
 80022e4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d113      	bne.n	8002312 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f4:	085b      	lsrs	r3, r3, #1
 80022f6:	3b01      	subs	r3, #1
 80022f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d109      	bne.n	8002312 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002308:	085b      	lsrs	r3, r3, #1
 800230a:	3b01      	subs	r3, #1
 800230c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800230e:	429a      	cmp	r2, r3
 8002310:	d06e      	beq.n	80023f0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	2b0c      	cmp	r3, #12
 8002316:	d069      	beq.n	80023ec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002318:	4b53      	ldr	r3, [pc, #332]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d105      	bne.n	8002330 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002324:	4b50      	ldr	r3, [pc, #320]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0ad      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002334:	4b4c      	ldr	r3, [pc, #304]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a4b      	ldr	r2, [pc, #300]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 800233a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800233e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002340:	f7fe fd30 	bl	8000da4 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002348:	f7fe fd2c 	bl	8000da4 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e09a      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800235a:	4b43      	ldr	r3, [pc, #268]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002366:	4b40      	ldr	r3, [pc, #256]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	4b40      	ldr	r3, [pc, #256]	@ (800246c <HAL_RCC_OscConfig+0x784>)
 800236c:	4013      	ands	r3, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002376:	3a01      	subs	r2, #1
 8002378:	0112      	lsls	r2, r2, #4
 800237a:	4311      	orrs	r1, r2
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002380:	0212      	lsls	r2, r2, #8
 8002382:	4311      	orrs	r1, r2
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002388:	0852      	lsrs	r2, r2, #1
 800238a:	3a01      	subs	r2, #1
 800238c:	0552      	lsls	r2, r2, #21
 800238e:	4311      	orrs	r1, r2
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002394:	0852      	lsrs	r2, r2, #1
 8002396:	3a01      	subs	r2, #1
 8002398:	0652      	lsls	r2, r2, #25
 800239a:	4311      	orrs	r1, r2
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80023a0:	0912      	lsrs	r2, r2, #4
 80023a2:	0452      	lsls	r2, r2, #17
 80023a4:	430a      	orrs	r2, r1
 80023a6:	4930      	ldr	r1, [pc, #192]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a2d      	ldr	r2, [pc, #180]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 80023b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4a2a      	ldr	r2, [pc, #168]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 80023be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023c4:	f7fe fcee 	bl	8000da4 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023cc:	f7fe fcea 	bl	8000da4 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e058      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023de:	4b22      	ldr	r3, [pc, #136]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023ea:	e050      	b.n	800248e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e04f      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d148      	bne.n	800248e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a19      	ldr	r2, [pc, #100]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 8002402:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002406:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002408:	4b17      	ldr	r3, [pc, #92]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4a16      	ldr	r2, [pc, #88]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 800240e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002412:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002414:	f7fe fcc6 	bl	8000da4 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241c:	f7fe fcc2 	bl	8000da4 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e030      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242e:	4b0e      	ldr	r3, [pc, #56]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x734>
 800243a:	e028      	b.n	800248e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	2b0c      	cmp	r3, #12
 8002440:	d023      	beq.n	800248a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002442:	4b09      	ldr	r3, [pc, #36]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a08      	ldr	r2, [pc, #32]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 8002448:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800244c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244e:	f7fe fca9 	bl	8000da4 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002454:	e00c      	b.n	8002470 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002456:	f7fe fca5 	bl	8000da4 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d905      	bls.n	8002470 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e013      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
 8002468:	40021000 	.word	0x40021000
 800246c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002470:	4b09      	ldr	r3, [pc, #36]	@ (8002498 <HAL_RCC_OscConfig+0x7b0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1ec      	bne.n	8002456 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800247c:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <HAL_RCC_OscConfig+0x7b0>)
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	4905      	ldr	r1, [pc, #20]	@ (8002498 <HAL_RCC_OscConfig+0x7b0>)
 8002482:	4b06      	ldr	r3, [pc, #24]	@ (800249c <HAL_RCC_OscConfig+0x7b4>)
 8002484:	4013      	ands	r3, r2
 8002486:	60cb      	str	r3, [r1, #12]
 8002488:	e001      	b.n	800248e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3720      	adds	r7, #32
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	feeefffc 	.word	0xfeeefffc

080024a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e0e7      	b.n	8002684 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024b4:	4b75      	ldr	r3, [pc, #468]	@ (800268c <HAL_RCC_ClockConfig+0x1ec>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d910      	bls.n	80024e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c2:	4b72      	ldr	r3, [pc, #456]	@ (800268c <HAL_RCC_ClockConfig+0x1ec>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 0207 	bic.w	r2, r3, #7
 80024ca:	4970      	ldr	r1, [pc, #448]	@ (800268c <HAL_RCC_ClockConfig+0x1ec>)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	4b6e      	ldr	r3, [pc, #440]	@ (800268c <HAL_RCC_ClockConfig+0x1ec>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d001      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0cf      	b.n	8002684 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d010      	beq.n	8002512 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	4b66      	ldr	r3, [pc, #408]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d908      	bls.n	8002512 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002500:	4b63      	ldr	r3, [pc, #396]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4960      	ldr	r1, [pc, #384]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d04c      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b03      	cmp	r3, #3
 8002524:	d107      	bne.n	8002536 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002526:	4b5a      	ldr	r3, [pc, #360]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d121      	bne.n	8002576 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e0a6      	b.n	8002684 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d107      	bne.n	800254e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800253e:	4b54      	ldr	r3, [pc, #336]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d115      	bne.n	8002576 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e09a      	b.n	8002684 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d107      	bne.n	8002566 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002556:	4b4e      	ldr	r3, [pc, #312]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d109      	bne.n	8002576 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e08e      	b.n	8002684 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002566:	4b4a      	ldr	r3, [pc, #296]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e086      	b.n	8002684 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002576:	4b46      	ldr	r3, [pc, #280]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f023 0203 	bic.w	r2, r3, #3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	4943      	ldr	r1, [pc, #268]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 8002584:	4313      	orrs	r3, r2
 8002586:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002588:	f7fe fc0c 	bl	8000da4 <HAL_GetTick>
 800258c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258e:	e00a      	b.n	80025a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002590:	f7fe fc08 	bl	8000da4 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e06e      	b.n	8002684 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 020c 	and.w	r2, r3, #12
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d1eb      	bne.n	8002590 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d010      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	4b31      	ldr	r3, [pc, #196]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d208      	bcs.n	80025e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	492b      	ldr	r1, [pc, #172]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025e6:	4b29      	ldr	r3, [pc, #164]	@ (800268c <HAL_RCC_ClockConfig+0x1ec>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d210      	bcs.n	8002616 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f4:	4b25      	ldr	r3, [pc, #148]	@ (800268c <HAL_RCC_ClockConfig+0x1ec>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f023 0207 	bic.w	r2, r3, #7
 80025fc:	4923      	ldr	r1, [pc, #140]	@ (800268c <HAL_RCC_ClockConfig+0x1ec>)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	4313      	orrs	r3, r2
 8002602:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002604:	4b21      	ldr	r3, [pc, #132]	@ (800268c <HAL_RCC_ClockConfig+0x1ec>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d001      	beq.n	8002616 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e036      	b.n	8002684 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002622:	4b1b      	ldr	r3, [pc, #108]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	4918      	ldr	r1, [pc, #96]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 8002630:	4313      	orrs	r3, r2
 8002632:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d009      	beq.n	8002654 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002640:	4b13      	ldr	r3, [pc, #76]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4910      	ldr	r1, [pc, #64]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 8002650:	4313      	orrs	r3, r2
 8002652:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002654:	f000 f824 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 8002658:	4602      	mov	r2, r0
 800265a:	4b0d      	ldr	r3, [pc, #52]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	091b      	lsrs	r3, r3, #4
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	490b      	ldr	r1, [pc, #44]	@ (8002694 <HAL_RCC_ClockConfig+0x1f4>)
 8002666:	5ccb      	ldrb	r3, [r1, r3]
 8002668:	f003 031f 	and.w	r3, r3, #31
 800266c:	fa22 f303 	lsr.w	r3, r2, r3
 8002670:	4a09      	ldr	r2, [pc, #36]	@ (8002698 <HAL_RCC_ClockConfig+0x1f8>)
 8002672:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002674:	4b09      	ldr	r3, [pc, #36]	@ (800269c <HAL_RCC_ClockConfig+0x1fc>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f7fe fb43 	bl	8000d04 <HAL_InitTick>
 800267e:	4603      	mov	r3, r0
 8002680:	72fb      	strb	r3, [r7, #11]

  return status;
 8002682:	7afb      	ldrb	r3, [r7, #11]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40022000 	.word	0x40022000
 8002690:	40021000 	.word	0x40021000
 8002694:	08004ce4 	.word	0x08004ce4
 8002698:	20000000 	.word	0x20000000
 800269c:	20000004 	.word	0x20000004

080026a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b089      	sub	sp, #36	@ 0x24
 80026a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	2300      	movs	r3, #0
 80026ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ae:	4b3e      	ldr	r3, [pc, #248]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026b8:	4b3b      	ldr	r3, [pc, #236]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0x34>
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	2b0c      	cmp	r3, #12
 80026cc:	d121      	bne.n	8002712 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d11e      	bne.n	8002712 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026d4:	4b34      	ldr	r3, [pc, #208]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d107      	bne.n	80026f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026e0:	4b31      	ldr	r3, [pc, #196]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026e6:	0a1b      	lsrs	r3, r3, #8
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	61fb      	str	r3, [r7, #28]
 80026ee:	e005      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026f0:	4b2d      	ldr	r3, [pc, #180]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026fc:	4a2b      	ldr	r2, [pc, #172]	@ (80027ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002704:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10d      	bne.n	8002728 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002710:	e00a      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	2b04      	cmp	r3, #4
 8002716:	d102      	bne.n	800271e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002718:	4b25      	ldr	r3, [pc, #148]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800271a:	61bb      	str	r3, [r7, #24]
 800271c:	e004      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	2b08      	cmp	r3, #8
 8002722:	d101      	bne.n	8002728 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002724:	4b23      	ldr	r3, [pc, #140]	@ (80027b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002726:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	2b0c      	cmp	r3, #12
 800272c:	d134      	bne.n	8002798 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800272e:	4b1e      	ldr	r3, [pc, #120]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d003      	beq.n	8002746 <HAL_RCC_GetSysClockFreq+0xa6>
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b03      	cmp	r3, #3
 8002742:	d003      	beq.n	800274c <HAL_RCC_GetSysClockFreq+0xac>
 8002744:	e005      	b.n	8002752 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002746:	4b1a      	ldr	r3, [pc, #104]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002748:	617b      	str	r3, [r7, #20]
      break;
 800274a:	e005      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800274c:	4b19      	ldr	r3, [pc, #100]	@ (80027b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800274e:	617b      	str	r3, [r7, #20]
      break;
 8002750:	e002      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	617b      	str	r3, [r7, #20]
      break;
 8002756:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002758:	4b13      	ldr	r3, [pc, #76]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	3301      	adds	r3, #1
 8002764:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002766:	4b10      	ldr	r3, [pc, #64]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	0a1b      	lsrs	r3, r3, #8
 800276c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	fb03 f202 	mul.w	r2, r3, r2
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	fbb2 f3f3 	udiv	r3, r2, r3
 800277c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800277e:	4b0a      	ldr	r3, [pc, #40]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	0e5b      	lsrs	r3, r3, #25
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	3301      	adds	r3, #1
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	fbb2 f3f3 	udiv	r3, r2, r3
 8002796:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002798:	69bb      	ldr	r3, [r7, #24]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3724      	adds	r7, #36	@ 0x24
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000
 80027ac:	08004cfc 	.word	0x08004cfc
 80027b0:	00f42400 	.word	0x00f42400
 80027b4:	007a1200 	.word	0x007a1200

080027b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027bc:	4b03      	ldr	r3, [pc, #12]	@ (80027cc <HAL_RCC_GetHCLKFreq+0x14>)
 80027be:	681b      	ldr	r3, [r3, #0]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	20000000 	.word	0x20000000

080027d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027d4:	f7ff fff0 	bl	80027b8 <HAL_RCC_GetHCLKFreq>
 80027d8:	4602      	mov	r2, r0
 80027da:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	0a1b      	lsrs	r3, r3, #8
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	4904      	ldr	r1, [pc, #16]	@ (80027f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027e6:	5ccb      	ldrb	r3, [r1, r3]
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000
 80027f8:	08004cf4 	.word	0x08004cf4

080027fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002800:	f7ff ffda 	bl	80027b8 <HAL_RCC_GetHCLKFreq>
 8002804:	4602      	mov	r2, r0
 8002806:	4b06      	ldr	r3, [pc, #24]	@ (8002820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	0adb      	lsrs	r3, r3, #11
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4904      	ldr	r1, [pc, #16]	@ (8002824 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	f003 031f 	and.w	r3, r3, #31
 8002818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800281c:	4618      	mov	r0, r3
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40021000 	.word	0x40021000
 8002824:	08004cf4 	.word	0x08004cf4

08002828 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002830:	2300      	movs	r3, #0
 8002832:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002834:	4b2a      	ldr	r3, [pc, #168]	@ (80028e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002838:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002840:	f7ff f9ee 	bl	8001c20 <HAL_PWREx_GetVoltageRange>
 8002844:	6178      	str	r0, [r7, #20]
 8002846:	e014      	b.n	8002872 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002848:	4b25      	ldr	r3, [pc, #148]	@ (80028e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800284a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284c:	4a24      	ldr	r2, [pc, #144]	@ (80028e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800284e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002852:	6593      	str	r3, [r2, #88]	@ 0x58
 8002854:	4b22      	ldr	r3, [pc, #136]	@ (80028e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002860:	f7ff f9de 	bl	8001c20 <HAL_PWREx_GetVoltageRange>
 8002864:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002866:	4b1e      	ldr	r3, [pc, #120]	@ (80028e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800286a:	4a1d      	ldr	r2, [pc, #116]	@ (80028e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800286c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002870:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002878:	d10b      	bne.n	8002892 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b80      	cmp	r3, #128	@ 0x80
 800287e:	d919      	bls.n	80028b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2ba0      	cmp	r3, #160	@ 0xa0
 8002884:	d902      	bls.n	800288c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002886:	2302      	movs	r3, #2
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	e013      	b.n	80028b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800288c:	2301      	movs	r3, #1
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	e010      	b.n	80028b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b80      	cmp	r3, #128	@ 0x80
 8002896:	d902      	bls.n	800289e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002898:	2303      	movs	r3, #3
 800289a:	613b      	str	r3, [r7, #16]
 800289c:	e00a      	b.n	80028b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b80      	cmp	r3, #128	@ 0x80
 80028a2:	d102      	bne.n	80028aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028a4:	2302      	movs	r3, #2
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	e004      	b.n	80028b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b70      	cmp	r3, #112	@ 0x70
 80028ae:	d101      	bne.n	80028b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028b0:	2301      	movs	r3, #1
 80028b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028b4:	4b0b      	ldr	r3, [pc, #44]	@ (80028e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f023 0207 	bic.w	r2, r3, #7
 80028bc:	4909      	ldr	r1, [pc, #36]	@ (80028e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028c4:	4b07      	ldr	r3, [pc, #28]	@ (80028e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d001      	beq.n	80028d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40022000 	.word	0x40022000

080028e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028f0:	2300      	movs	r3, #0
 80028f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028f4:	2300      	movs	r3, #0
 80028f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002900:	2b00      	cmp	r3, #0
 8002902:	d041      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002908:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800290c:	d02a      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800290e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002912:	d824      	bhi.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002914:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002918:	d008      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800291a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800291e:	d81e      	bhi.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002924:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002928:	d010      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800292a:	e018      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800292c:	4b86      	ldr	r3, [pc, #536]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4a85      	ldr	r2, [pc, #532]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002932:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002936:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002938:	e015      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3304      	adds	r3, #4
 800293e:	2100      	movs	r1, #0
 8002940:	4618      	mov	r0, r3
 8002942:	f000 fabb 	bl	8002ebc <RCCEx_PLLSAI1_Config>
 8002946:	4603      	mov	r3, r0
 8002948:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800294a:	e00c      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3320      	adds	r3, #32
 8002950:	2100      	movs	r1, #0
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fba6 	bl	80030a4 <RCCEx_PLLSAI2_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800295c:	e003      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	74fb      	strb	r3, [r7, #19]
      break;
 8002962:	e000      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002964:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002966:	7cfb      	ldrb	r3, [r7, #19]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10b      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800296c:	4b76      	ldr	r3, [pc, #472]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002972:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800297a:	4973      	ldr	r1, [pc, #460]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002982:	e001      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002984:	7cfb      	ldrb	r3, [r7, #19]
 8002986:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d041      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002998:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800299c:	d02a      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800299e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80029a2:	d824      	bhi.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80029a8:	d008      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80029aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80029ae:	d81e      	bhi.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00a      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80029b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029b8:	d010      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029ba:	e018      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029bc:	4b62      	ldr	r3, [pc, #392]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4a61      	ldr	r2, [pc, #388]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029c8:	e015      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3304      	adds	r3, #4
 80029ce:	2100      	movs	r1, #0
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 fa73 	bl	8002ebc <RCCEx_PLLSAI1_Config>
 80029d6:	4603      	mov	r3, r0
 80029d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029da:	e00c      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3320      	adds	r3, #32
 80029e0:	2100      	movs	r1, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 fb5e 	bl	80030a4 <RCCEx_PLLSAI2_Config>
 80029e8:	4603      	mov	r3, r0
 80029ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029ec:	e003      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	74fb      	strb	r3, [r7, #19]
      break;
 80029f2:	e000      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80029f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029f6:	7cfb      	ldrb	r3, [r7, #19]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10b      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029fc:	4b52      	ldr	r3, [pc, #328]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a02:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a0a:	494f      	ldr	r1, [pc, #316]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002a12:	e001      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a14:	7cfb      	ldrb	r3, [r7, #19]
 8002a16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80a0 	beq.w	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a26:	2300      	movs	r3, #0
 8002a28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a2a:	4b47      	ldr	r3, [pc, #284]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00d      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a40:	4b41      	ldr	r3, [pc, #260]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a44:	4a40      	ldr	r2, [pc, #256]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a4c:	4b3e      	ldr	r3, [pc, #248]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a5c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a3a      	ldr	r2, [pc, #232]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a68:	f7fe f99c 	bl	8000da4 <HAL_GetTick>
 8002a6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a6e:	e009      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a70:	f7fe f998 	bl	8000da4 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d902      	bls.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	74fb      	strb	r3, [r7, #19]
        break;
 8002a82:	e005      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a84:	4b31      	ldr	r3, [pc, #196]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0ef      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a90:	7cfb      	ldrb	r3, [r7, #19]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d15c      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a96:	4b2c      	ldr	r3, [pc, #176]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aa0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d01f      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d019      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ab4:	4b24      	ldr	r3, [pc, #144]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002abe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ac0:	4b21      	ldr	r3, [pc, #132]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac6:	4a20      	ldr	r2, [pc, #128]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002acc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002adc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ae0:	4a19      	ldr	r2, [pc, #100]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d016      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af2:	f7fe f957 	bl	8000da4 <HAL_GetTick>
 8002af6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002af8:	e00b      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afa:	f7fe f953 	bl	8000da4 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d902      	bls.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	74fb      	strb	r3, [r7, #19]
            break;
 8002b10:	e006      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b12:	4b0d      	ldr	r3, [pc, #52]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0ec      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002b20:	7cfb      	ldrb	r3, [r7, #19]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10c      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b26:	4b08      	ldr	r3, [pc, #32]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b36:	4904      	ldr	r1, [pc, #16]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002b3e:	e009      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b40:	7cfb      	ldrb	r3, [r7, #19]
 8002b42:	74bb      	strb	r3, [r7, #18]
 8002b44:	e006      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002b46:	bf00      	nop
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b50:	7cfb      	ldrb	r3, [r7, #19]
 8002b52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b54:	7c7b      	ldrb	r3, [r7, #17]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d105      	bne.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b5a:	4b9e      	ldr	r3, [pc, #632]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b5e:	4a9d      	ldr	r2, [pc, #628]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b64:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b72:	4b98      	ldr	r3, [pc, #608]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b78:	f023 0203 	bic.w	r2, r3, #3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b80:	4994      	ldr	r1, [pc, #592]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b94:	4b8f      	ldr	r3, [pc, #572]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9a:	f023 020c 	bic.w	r2, r3, #12
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba2:	498c      	ldr	r1, [pc, #560]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bb6:	4b87      	ldr	r3, [pc, #540]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bbc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc4:	4983      	ldr	r1, [pc, #524]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bd8:	4b7e      	ldr	r3, [pc, #504]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bde:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be6:	497b      	ldr	r1, [pc, #492]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bfa:	4b76      	ldr	r3, [pc, #472]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c08:	4972      	ldr	r1, [pc, #456]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c1c:	4b6d      	ldr	r3, [pc, #436]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c22:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c2a:	496a      	ldr	r1, [pc, #424]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c3e:	4b65      	ldr	r3, [pc, #404]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c44:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4c:	4961      	ldr	r1, [pc, #388]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00a      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c60:	4b5c      	ldr	r3, [pc, #368]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c6e:	4959      	ldr	r1, [pc, #356]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00a      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c82:	4b54      	ldr	r3, [pc, #336]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c88:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c90:	4950      	ldr	r1, [pc, #320]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00a      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ca4:	4b4b      	ldr	r3, [pc, #300]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002caa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb2:	4948      	ldr	r1, [pc, #288]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cc6:	4b43      	ldr	r3, [pc, #268]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ccc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd4:	493f      	ldr	r1, [pc, #252]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d028      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ce8:	4b3a      	ldr	r3, [pc, #232]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cf6:	4937      	ldr	r1, [pc, #220]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d06:	d106      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d08:	4b32      	ldr	r3, [pc, #200]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	4a31      	ldr	r2, [pc, #196]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d12:	60d3      	str	r3, [r2, #12]
 8002d14:	e011      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d1a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d1e:	d10c      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3304      	adds	r3, #4
 8002d24:	2101      	movs	r1, #1
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 f8c8 	bl	8002ebc <RCCEx_PLLSAI1_Config>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d30:	7cfb      	ldrb	r3, [r7, #19]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002d36:	7cfb      	ldrb	r3, [r7, #19]
 8002d38:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d028      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d46:	4b23      	ldr	r3, [pc, #140]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d4c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d54:	491f      	ldr	r1, [pc, #124]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d64:	d106      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d66:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	4a1a      	ldr	r2, [pc, #104]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d6c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d70:	60d3      	str	r3, [r2, #12]
 8002d72:	e011      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3304      	adds	r3, #4
 8002d82:	2101      	movs	r1, #1
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 f899 	bl	8002ebc <RCCEx_PLLSAI1_Config>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d8e:	7cfb      	ldrb	r3, [r7, #19]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d94:	7cfb      	ldrb	r3, [r7, #19]
 8002d96:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d02b      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002da4:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002daa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002db2:	4908      	ldr	r1, [pc, #32]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dc2:	d109      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dc4:	4b03      	ldr	r3, [pc, #12]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	4a02      	ldr	r2, [pc, #8]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dce:	60d3      	str	r3, [r2, #12]
 8002dd0:	e014      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002dd2:	bf00      	nop
 8002dd4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ddc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002de0:	d10c      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3304      	adds	r3, #4
 8002de6:	2101      	movs	r1, #1
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 f867 	bl	8002ebc <RCCEx_PLLSAI1_Config>
 8002dee:	4603      	mov	r3, r0
 8002df0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002df2:	7cfb      	ldrb	r3, [r7, #19]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002df8:	7cfb      	ldrb	r3, [r7, #19]
 8002dfa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d02f      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e08:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e16:	4928      	ldr	r1, [pc, #160]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e26:	d10d      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	2102      	movs	r1, #2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 f844 	bl	8002ebc <RCCEx_PLLSAI1_Config>
 8002e34:	4603      	mov	r3, r0
 8002e36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e38:	7cfb      	ldrb	r3, [r7, #19]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d014      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e3e:	7cfb      	ldrb	r3, [r7, #19]
 8002e40:	74bb      	strb	r3, [r7, #18]
 8002e42:	e011      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3320      	adds	r3, #32
 8002e52:	2102      	movs	r1, #2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 f925 	bl	80030a4 <RCCEx_PLLSAI2_Config>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e5e:	7cfb      	ldrb	r3, [r7, #19]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e64:	7cfb      	ldrb	r3, [r7, #19]
 8002e66:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e74:	4b10      	ldr	r3, [pc, #64]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e82:	490d      	ldr	r1, [pc, #52]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e96:	4b08      	ldr	r3, [pc, #32]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e9c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ea6:	4904      	ldr	r1, [pc, #16]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002eae:	7cbb      	ldrb	r3, [r7, #18]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40021000 	.word	0x40021000

08002ebc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eca:	4b75      	ldr	r3, [pc, #468]	@ (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d018      	beq.n	8002f08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ed6:	4b72      	ldr	r3, [pc, #456]	@ (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f003 0203 	and.w	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d10d      	bne.n	8002f02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
       ||
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d009      	beq.n	8002f02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002eee:	4b6c      	ldr	r3, [pc, #432]	@ (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	091b      	lsrs	r3, r3, #4
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
       ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d047      	beq.n	8002f92 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	73fb      	strb	r3, [r7, #15]
 8002f06:	e044      	b.n	8002f92 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d018      	beq.n	8002f42 <RCCEx_PLLSAI1_Config+0x86>
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d825      	bhi.n	8002f60 <RCCEx_PLLSAI1_Config+0xa4>
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d002      	beq.n	8002f1e <RCCEx_PLLSAI1_Config+0x62>
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d009      	beq.n	8002f30 <RCCEx_PLLSAI1_Config+0x74>
 8002f1c:	e020      	b.n	8002f60 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f1e:	4b60      	ldr	r3, [pc, #384]	@ (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d11d      	bne.n	8002f66 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f2e:	e01a      	b.n	8002f66 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f30:	4b5b      	ldr	r3, [pc, #364]	@ (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d116      	bne.n	8002f6a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f40:	e013      	b.n	8002f6a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f42:	4b57      	ldr	r3, [pc, #348]	@ (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10f      	bne.n	8002f6e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f4e:	4b54      	ldr	r3, [pc, #336]	@ (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f5e:	e006      	b.n	8002f6e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
      break;
 8002f64:	e004      	b.n	8002f70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f66:	bf00      	nop
 8002f68:	e002      	b.n	8002f70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f6a:	bf00      	nop
 8002f6c:	e000      	b.n	8002f70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10d      	bne.n	8002f92 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f76:	4b4a      	ldr	r3, [pc, #296]	@ (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6819      	ldr	r1, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	430b      	orrs	r3, r1
 8002f8c:	4944      	ldr	r1, [pc, #272]	@ (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d17d      	bne.n	8003094 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f98:	4b41      	ldr	r3, [pc, #260]	@ (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a40      	ldr	r2, [pc, #256]	@ (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002fa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa4:	f7fd fefe 	bl	8000da4 <HAL_GetTick>
 8002fa8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002faa:	e009      	b.n	8002fc0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fac:	f7fd fefa 	bl	8000da4 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d902      	bls.n	8002fc0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	73fb      	strb	r3, [r7, #15]
        break;
 8002fbe:	e005      	b.n	8002fcc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fc0:	4b37      	ldr	r3, [pc, #220]	@ (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1ef      	bne.n	8002fac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d160      	bne.n	8003094 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d111      	bne.n	8002ffc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fd8:	4b31      	ldr	r3, [pc, #196]	@ (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002fe0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6892      	ldr	r2, [r2, #8]
 8002fe8:	0211      	lsls	r1, r2, #8
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	68d2      	ldr	r2, [r2, #12]
 8002fee:	0912      	lsrs	r2, r2, #4
 8002ff0:	0452      	lsls	r2, r2, #17
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	492a      	ldr	r1, [pc, #168]	@ (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	610b      	str	r3, [r1, #16]
 8002ffa:	e027      	b.n	800304c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d112      	bne.n	8003028 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003002:	4b27      	ldr	r3, [pc, #156]	@ (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800300a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6892      	ldr	r2, [r2, #8]
 8003012:	0211      	lsls	r1, r2, #8
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6912      	ldr	r2, [r2, #16]
 8003018:	0852      	lsrs	r2, r2, #1
 800301a:	3a01      	subs	r2, #1
 800301c:	0552      	lsls	r2, r2, #21
 800301e:	430a      	orrs	r2, r1
 8003020:	491f      	ldr	r1, [pc, #124]	@ (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003022:	4313      	orrs	r3, r2
 8003024:	610b      	str	r3, [r1, #16]
 8003026:	e011      	b.n	800304c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003028:	4b1d      	ldr	r3, [pc, #116]	@ (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003030:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6892      	ldr	r2, [r2, #8]
 8003038:	0211      	lsls	r1, r2, #8
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6952      	ldr	r2, [r2, #20]
 800303e:	0852      	lsrs	r2, r2, #1
 8003040:	3a01      	subs	r2, #1
 8003042:	0652      	lsls	r2, r2, #25
 8003044:	430a      	orrs	r2, r1
 8003046:	4916      	ldr	r1, [pc, #88]	@ (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003048:	4313      	orrs	r3, r2
 800304a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800304c:	4b14      	ldr	r3, [pc, #80]	@ (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a13      	ldr	r2, [pc, #76]	@ (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003052:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003056:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003058:	f7fd fea4 	bl	8000da4 <HAL_GetTick>
 800305c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800305e:	e009      	b.n	8003074 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003060:	f7fd fea0 	bl	8000da4 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d902      	bls.n	8003074 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	73fb      	strb	r3, [r7, #15]
          break;
 8003072:	e005      	b.n	8003080 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003074:	4b0a      	ldr	r3, [pc, #40]	@ (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0ef      	beq.n	8003060 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003080:	7bfb      	ldrb	r3, [r7, #15]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003086:	4b06      	ldr	r3, [pc, #24]	@ (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	4904      	ldr	r1, [pc, #16]	@ (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003090:	4313      	orrs	r3, r2
 8003092:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003094:	7bfb      	ldrb	r3, [r7, #15]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40021000 	.word	0x40021000

080030a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030b2:	4b6a      	ldr	r3, [pc, #424]	@ (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d018      	beq.n	80030f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80030be:	4b67      	ldr	r3, [pc, #412]	@ (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f003 0203 	and.w	r2, r3, #3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d10d      	bne.n	80030ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
       ||
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d009      	beq.n	80030ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80030d6:	4b61      	ldr	r3, [pc, #388]	@ (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	091b      	lsrs	r3, r3, #4
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
       ||
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d047      	beq.n	800317a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
 80030ee:	e044      	b.n	800317a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d018      	beq.n	800312a <RCCEx_PLLSAI2_Config+0x86>
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d825      	bhi.n	8003148 <RCCEx_PLLSAI2_Config+0xa4>
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d002      	beq.n	8003106 <RCCEx_PLLSAI2_Config+0x62>
 8003100:	2b02      	cmp	r3, #2
 8003102:	d009      	beq.n	8003118 <RCCEx_PLLSAI2_Config+0x74>
 8003104:	e020      	b.n	8003148 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003106:	4b55      	ldr	r3, [pc, #340]	@ (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d11d      	bne.n	800314e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003116:	e01a      	b.n	800314e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003118:	4b50      	ldr	r3, [pc, #320]	@ (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003120:	2b00      	cmp	r3, #0
 8003122:	d116      	bne.n	8003152 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003128:	e013      	b.n	8003152 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800312a:	4b4c      	ldr	r3, [pc, #304]	@ (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10f      	bne.n	8003156 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003136:	4b49      	ldr	r3, [pc, #292]	@ (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003146:	e006      	b.n	8003156 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	73fb      	strb	r3, [r7, #15]
      break;
 800314c:	e004      	b.n	8003158 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800314e:	bf00      	nop
 8003150:	e002      	b.n	8003158 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003152:	bf00      	nop
 8003154:	e000      	b.n	8003158 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003156:	bf00      	nop
    }

    if(status == HAL_OK)
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10d      	bne.n	800317a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800315e:	4b3f      	ldr	r3, [pc, #252]	@ (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6819      	ldr	r1, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	3b01      	subs	r3, #1
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	430b      	orrs	r3, r1
 8003174:	4939      	ldr	r1, [pc, #228]	@ (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003176:	4313      	orrs	r3, r2
 8003178:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d167      	bne.n	8003250 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003180:	4b36      	ldr	r3, [pc, #216]	@ (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a35      	ldr	r2, [pc, #212]	@ (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003186:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800318a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800318c:	f7fd fe0a 	bl	8000da4 <HAL_GetTick>
 8003190:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003192:	e009      	b.n	80031a8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003194:	f7fd fe06 	bl	8000da4 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d902      	bls.n	80031a8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	73fb      	strb	r3, [r7, #15]
        break;
 80031a6:	e005      	b.n	80031b4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031a8:	4b2c      	ldr	r3, [pc, #176]	@ (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1ef      	bne.n	8003194 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d14a      	bne.n	8003250 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d111      	bne.n	80031e4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031c0:	4b26      	ldr	r3, [pc, #152]	@ (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80031c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6892      	ldr	r2, [r2, #8]
 80031d0:	0211      	lsls	r1, r2, #8
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	68d2      	ldr	r2, [r2, #12]
 80031d6:	0912      	lsrs	r2, r2, #4
 80031d8:	0452      	lsls	r2, r2, #17
 80031da:	430a      	orrs	r2, r1
 80031dc:	491f      	ldr	r1, [pc, #124]	@ (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	614b      	str	r3, [r1, #20]
 80031e2:	e011      	b.n	8003208 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031e4:	4b1d      	ldr	r3, [pc, #116]	@ (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80031ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6892      	ldr	r2, [r2, #8]
 80031f4:	0211      	lsls	r1, r2, #8
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6912      	ldr	r2, [r2, #16]
 80031fa:	0852      	lsrs	r2, r2, #1
 80031fc:	3a01      	subs	r2, #1
 80031fe:	0652      	lsls	r2, r2, #25
 8003200:	430a      	orrs	r2, r1
 8003202:	4916      	ldr	r1, [pc, #88]	@ (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003204:	4313      	orrs	r3, r2
 8003206:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003208:	4b14      	ldr	r3, [pc, #80]	@ (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a13      	ldr	r2, [pc, #76]	@ (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 800320e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003212:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003214:	f7fd fdc6 	bl	8000da4 <HAL_GetTick>
 8003218:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800321a:	e009      	b.n	8003230 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800321c:	f7fd fdc2 	bl	8000da4 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d902      	bls.n	8003230 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	73fb      	strb	r3, [r7, #15]
          break;
 800322e:	e005      	b.n	800323c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003230:	4b0a      	ldr	r3, [pc, #40]	@ (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0ef      	beq.n	800321c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d106      	bne.n	8003250 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003242:	4b06      	ldr	r3, [pc, #24]	@ (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003244:	695a      	ldr	r2, [r3, #20]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	4904      	ldr	r1, [pc, #16]	@ (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 800324c:	4313      	orrs	r3, r2
 800324e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003250:	7bfb      	ldrb	r3, [r7, #15]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40021000 	.word	0x40021000

08003260 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e049      	b.n	8003306 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7fd fb86 	bl	8000998 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3304      	adds	r3, #4
 800329c:	4619      	mov	r1, r3
 800329e:	4610      	mov	r0, r2
 80032a0:	f000 f8fe 	bl	80034a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b084      	sub	sp, #16
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003318:	2300      	movs	r3, #0
 800331a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_TIM_ConfigClockSource+0x1c>
 8003326:	2302      	movs	r3, #2
 8003328:	e0b6      	b.n	8003498 <HAL_TIM_ConfigClockSource+0x18a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2202      	movs	r2, #2
 8003336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003348:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800334c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003354:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003366:	d03e      	beq.n	80033e6 <HAL_TIM_ConfigClockSource+0xd8>
 8003368:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800336c:	f200 8087 	bhi.w	800347e <HAL_TIM_ConfigClockSource+0x170>
 8003370:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003374:	f000 8086 	beq.w	8003484 <HAL_TIM_ConfigClockSource+0x176>
 8003378:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800337c:	d87f      	bhi.n	800347e <HAL_TIM_ConfigClockSource+0x170>
 800337e:	2b70      	cmp	r3, #112	@ 0x70
 8003380:	d01a      	beq.n	80033b8 <HAL_TIM_ConfigClockSource+0xaa>
 8003382:	2b70      	cmp	r3, #112	@ 0x70
 8003384:	d87b      	bhi.n	800347e <HAL_TIM_ConfigClockSource+0x170>
 8003386:	2b60      	cmp	r3, #96	@ 0x60
 8003388:	d050      	beq.n	800342c <HAL_TIM_ConfigClockSource+0x11e>
 800338a:	2b60      	cmp	r3, #96	@ 0x60
 800338c:	d877      	bhi.n	800347e <HAL_TIM_ConfigClockSource+0x170>
 800338e:	2b50      	cmp	r3, #80	@ 0x50
 8003390:	d03c      	beq.n	800340c <HAL_TIM_ConfigClockSource+0xfe>
 8003392:	2b50      	cmp	r3, #80	@ 0x50
 8003394:	d873      	bhi.n	800347e <HAL_TIM_ConfigClockSource+0x170>
 8003396:	2b40      	cmp	r3, #64	@ 0x40
 8003398:	d058      	beq.n	800344c <HAL_TIM_ConfigClockSource+0x13e>
 800339a:	2b40      	cmp	r3, #64	@ 0x40
 800339c:	d86f      	bhi.n	800347e <HAL_TIM_ConfigClockSource+0x170>
 800339e:	2b30      	cmp	r3, #48	@ 0x30
 80033a0:	d064      	beq.n	800346c <HAL_TIM_ConfigClockSource+0x15e>
 80033a2:	2b30      	cmp	r3, #48	@ 0x30
 80033a4:	d86b      	bhi.n	800347e <HAL_TIM_ConfigClockSource+0x170>
 80033a6:	2b20      	cmp	r3, #32
 80033a8:	d060      	beq.n	800346c <HAL_TIM_ConfigClockSource+0x15e>
 80033aa:	2b20      	cmp	r3, #32
 80033ac:	d867      	bhi.n	800347e <HAL_TIM_ConfigClockSource+0x170>
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d05c      	beq.n	800346c <HAL_TIM_ConfigClockSource+0x15e>
 80033b2:	2b10      	cmp	r3, #16
 80033b4:	d05a      	beq.n	800346c <HAL_TIM_ConfigClockSource+0x15e>
 80033b6:	e062      	b.n	800347e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033c8:	f000 f97e 	bl	80036c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80033da:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	609a      	str	r2, [r3, #8]
      break;
 80033e4:	e04f      	b.n	8003486 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033f6:	f000 f967 	bl	80036c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003408:	609a      	str	r2, [r3, #8]
      break;
 800340a:	e03c      	b.n	8003486 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003418:	461a      	mov	r2, r3
 800341a:	f000 f8db 	bl	80035d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2150      	movs	r1, #80	@ 0x50
 8003424:	4618      	mov	r0, r3
 8003426:	f000 f934 	bl	8003692 <TIM_ITRx_SetConfig>
      break;
 800342a:	e02c      	b.n	8003486 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003438:	461a      	mov	r2, r3
 800343a:	f000 f8fa 	bl	8003632 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2160      	movs	r1, #96	@ 0x60
 8003444:	4618      	mov	r0, r3
 8003446:	f000 f924 	bl	8003692 <TIM_ITRx_SetConfig>
      break;
 800344a:	e01c      	b.n	8003486 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003458:	461a      	mov	r2, r3
 800345a:	f000 f8bb 	bl	80035d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2140      	movs	r1, #64	@ 0x40
 8003464:	4618      	mov	r0, r3
 8003466:	f000 f914 	bl	8003692 <TIM_ITRx_SetConfig>
      break;
 800346a:	e00c      	b.n	8003486 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4619      	mov	r1, r3
 8003476:	4610      	mov	r0, r2
 8003478:	f000 f90b 	bl	8003692 <TIM_ITRx_SetConfig>
      break;
 800347c:	e003      	b.n	8003486 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	73fb      	strb	r3, [r7, #15]
      break;
 8003482:	e000      	b.n	8003486 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003484:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003496:	7bfb      	ldrb	r3, [r7, #15]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a40      	ldr	r2, [pc, #256]	@ (80035b4 <TIM_Base_SetConfig+0x114>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d013      	beq.n	80034e0 <TIM_Base_SetConfig+0x40>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034be:	d00f      	beq.n	80034e0 <TIM_Base_SetConfig+0x40>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a3d      	ldr	r2, [pc, #244]	@ (80035b8 <TIM_Base_SetConfig+0x118>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d00b      	beq.n	80034e0 <TIM_Base_SetConfig+0x40>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a3c      	ldr	r2, [pc, #240]	@ (80035bc <TIM_Base_SetConfig+0x11c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d007      	beq.n	80034e0 <TIM_Base_SetConfig+0x40>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a3b      	ldr	r2, [pc, #236]	@ (80035c0 <TIM_Base_SetConfig+0x120>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d003      	beq.n	80034e0 <TIM_Base_SetConfig+0x40>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a3a      	ldr	r2, [pc, #232]	@ (80035c4 <TIM_Base_SetConfig+0x124>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d108      	bne.n	80034f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a2f      	ldr	r2, [pc, #188]	@ (80035b4 <TIM_Base_SetConfig+0x114>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d01f      	beq.n	800353a <TIM_Base_SetConfig+0x9a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003500:	d01b      	beq.n	800353a <TIM_Base_SetConfig+0x9a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a2c      	ldr	r2, [pc, #176]	@ (80035b8 <TIM_Base_SetConfig+0x118>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d017      	beq.n	800353a <TIM_Base_SetConfig+0x9a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a2b      	ldr	r2, [pc, #172]	@ (80035bc <TIM_Base_SetConfig+0x11c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d013      	beq.n	800353a <TIM_Base_SetConfig+0x9a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a2a      	ldr	r2, [pc, #168]	@ (80035c0 <TIM_Base_SetConfig+0x120>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00f      	beq.n	800353a <TIM_Base_SetConfig+0x9a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a29      	ldr	r2, [pc, #164]	@ (80035c4 <TIM_Base_SetConfig+0x124>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00b      	beq.n	800353a <TIM_Base_SetConfig+0x9a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a28      	ldr	r2, [pc, #160]	@ (80035c8 <TIM_Base_SetConfig+0x128>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d007      	beq.n	800353a <TIM_Base_SetConfig+0x9a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a27      	ldr	r2, [pc, #156]	@ (80035cc <TIM_Base_SetConfig+0x12c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d003      	beq.n	800353a <TIM_Base_SetConfig+0x9a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a26      	ldr	r2, [pc, #152]	@ (80035d0 <TIM_Base_SetConfig+0x130>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d108      	bne.n	800354c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a10      	ldr	r2, [pc, #64]	@ (80035b4 <TIM_Base_SetConfig+0x114>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d00f      	beq.n	8003598 <TIM_Base_SetConfig+0xf8>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a12      	ldr	r2, [pc, #72]	@ (80035c4 <TIM_Base_SetConfig+0x124>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d00b      	beq.n	8003598 <TIM_Base_SetConfig+0xf8>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a11      	ldr	r2, [pc, #68]	@ (80035c8 <TIM_Base_SetConfig+0x128>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d007      	beq.n	8003598 <TIM_Base_SetConfig+0xf8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a10      	ldr	r2, [pc, #64]	@ (80035cc <TIM_Base_SetConfig+0x12c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d003      	beq.n	8003598 <TIM_Base_SetConfig+0xf8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a0f      	ldr	r2, [pc, #60]	@ (80035d0 <TIM_Base_SetConfig+0x130>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d103      	bne.n	80035a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	615a      	str	r2, [r3, #20]
}
 80035a6:	bf00      	nop
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40012c00 	.word	0x40012c00
 80035b8:	40000400 	.word	0x40000400
 80035bc:	40000800 	.word	0x40000800
 80035c0:	40000c00 	.word	0x40000c00
 80035c4:	40013400 	.word	0x40013400
 80035c8:	40014000 	.word	0x40014000
 80035cc:	40014400 	.word	0x40014400
 80035d0:	40014800 	.word	0x40014800

080035d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f023 0201 	bic.w	r2, r3, #1
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f023 030a 	bic.w	r3, r3, #10
 8003610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	621a      	str	r2, [r3, #32]
}
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003632:	b480      	push	{r7}
 8003634:	b087      	sub	sp, #28
 8003636:	af00      	add	r7, sp, #0
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f023 0210 	bic.w	r2, r3, #16
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800365c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	031b      	lsls	r3, r3, #12
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800366e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	621a      	str	r2, [r3, #32]
}
 8003686:	bf00      	nop
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003692:	b480      	push	{r7}
 8003694:	b085      	sub	sp, #20
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f043 0307 	orr.w	r3, r3, #7
 80036b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	609a      	str	r2, [r3, #8]
}
 80036bc:	bf00      	nop
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	021a      	lsls	r2, r3, #8
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	609a      	str	r2, [r3, #8]
}
 80036fc:	bf00      	nop
 80036fe:	371c      	adds	r7, #28
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003718:	2b01      	cmp	r3, #1
 800371a:	d101      	bne.n	8003720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800371c:	2302      	movs	r3, #2
 800371e:	e068      	b.n	80037f2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a2e      	ldr	r2, [pc, #184]	@ (8003800 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d004      	beq.n	8003754 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a2d      	ldr	r2, [pc, #180]	@ (8003804 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d108      	bne.n	8003766 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800375a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800376c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	4313      	orrs	r3, r2
 8003776:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a1e      	ldr	r2, [pc, #120]	@ (8003800 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d01d      	beq.n	80037c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003792:	d018      	beq.n	80037c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a1b      	ldr	r2, [pc, #108]	@ (8003808 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d013      	beq.n	80037c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a1a      	ldr	r2, [pc, #104]	@ (800380c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00e      	beq.n	80037c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a18      	ldr	r2, [pc, #96]	@ (8003810 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d009      	beq.n	80037c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a13      	ldr	r2, [pc, #76]	@ (8003804 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d004      	beq.n	80037c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a14      	ldr	r2, [pc, #80]	@ (8003814 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d10c      	bne.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40012c00 	.word	0x40012c00
 8003804:	40013400 	.word	0x40013400
 8003808:	40000400 	.word	0x40000400
 800380c:	40000800 	.word	0x40000800
 8003810:	40000c00 	.word	0x40000c00
 8003814:	40014000 	.word	0x40014000

08003818 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e040      	b.n	80038ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fd f8cc 	bl	80009d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2224      	movs	r2, #36	@ 0x24
 8003844:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0201 	bic.w	r2, r2, #1
 8003854:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fb6a 	bl	8003f38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f8af 	bl	80039c8 <UART_SetConfig>
 800386a:	4603      	mov	r3, r0
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e01b      	b.n	80038ac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003882:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003892:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 fbe9 	bl	800407c <UART_CheckIdleState>
 80038aa:	4603      	mov	r3, r0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b08a      	sub	sp, #40	@ 0x28
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	4613      	mov	r3, r2
 80038c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d177      	bne.n	80039bc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <HAL_UART_Transmit+0x24>
 80038d2:	88fb      	ldrh	r3, [r7, #6]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e070      	b.n	80039be <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2221      	movs	r2, #33	@ 0x21
 80038e8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038ea:	f7fd fa5b 	bl	8000da4 <HAL_GetTick>
 80038ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	88fa      	ldrh	r2, [r7, #6]
 80038f4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	88fa      	ldrh	r2, [r7, #6]
 80038fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003908:	d108      	bne.n	800391c <HAL_UART_Transmit+0x68>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d104      	bne.n	800391c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003912:	2300      	movs	r3, #0
 8003914:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	61bb      	str	r3, [r7, #24]
 800391a:	e003      	b.n	8003924 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003920:	2300      	movs	r3, #0
 8003922:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003924:	e02f      	b.n	8003986 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2200      	movs	r2, #0
 800392e:	2180      	movs	r1, #128	@ 0x80
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 fc4b 	bl	80041cc <UART_WaitOnFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d004      	beq.n	8003946 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e03b      	b.n	80039be <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10b      	bne.n	8003964 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	881a      	ldrh	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003958:	b292      	uxth	r2, r2
 800395a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	3302      	adds	r3, #2
 8003960:	61bb      	str	r3, [r7, #24]
 8003962:	e007      	b.n	8003974 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	781a      	ldrb	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	3301      	adds	r3, #1
 8003972:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1c9      	bne.n	8003926 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2200      	movs	r2, #0
 800399a:	2140      	movs	r1, #64	@ 0x40
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 fc15 	bl	80041cc <UART_WaitOnFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d004      	beq.n	80039b2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e005      	b.n	80039be <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2220      	movs	r2, #32
 80039b6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	e000      	b.n	80039be <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80039bc:	2302      	movs	r3, #2
  }
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3720      	adds	r7, #32
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039cc:	b08a      	sub	sp, #40	@ 0x28
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	431a      	orrs	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	431a      	orrs	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	4ba4      	ldr	r3, [pc, #656]	@ (8003c88 <UART_SetConfig+0x2c0>)
 80039f8:	4013      	ands	r3, r2
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	6812      	ldr	r2, [r2, #0]
 80039fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a00:	430b      	orrs	r3, r1
 8003a02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a99      	ldr	r2, [pc, #612]	@ (8003c8c <UART_SetConfig+0x2c4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d004      	beq.n	8003a34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a30:	4313      	orrs	r3, r2
 8003a32:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a44:	430a      	orrs	r2, r1
 8003a46:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a90      	ldr	r2, [pc, #576]	@ (8003c90 <UART_SetConfig+0x2c8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d126      	bne.n	8003aa0 <UART_SetConfig+0xd8>
 8003a52:	4b90      	ldr	r3, [pc, #576]	@ (8003c94 <UART_SetConfig+0x2cc>)
 8003a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a58:	f003 0303 	and.w	r3, r3, #3
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d81b      	bhi.n	8003a98 <UART_SetConfig+0xd0>
 8003a60:	a201      	add	r2, pc, #4	@ (adr r2, 8003a68 <UART_SetConfig+0xa0>)
 8003a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a66:	bf00      	nop
 8003a68:	08003a79 	.word	0x08003a79
 8003a6c:	08003a89 	.word	0x08003a89
 8003a70:	08003a81 	.word	0x08003a81
 8003a74:	08003a91 	.word	0x08003a91
 8003a78:	2301      	movs	r3, #1
 8003a7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a7e:	e116      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003a80:	2302      	movs	r3, #2
 8003a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a86:	e112      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003a88:	2304      	movs	r3, #4
 8003a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a8e:	e10e      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003a90:	2308      	movs	r3, #8
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a96:	e10a      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003a98:	2310      	movs	r3, #16
 8003a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a9e:	e106      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a7c      	ldr	r2, [pc, #496]	@ (8003c98 <UART_SetConfig+0x2d0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d138      	bne.n	8003b1c <UART_SetConfig+0x154>
 8003aaa:	4b7a      	ldr	r3, [pc, #488]	@ (8003c94 <UART_SetConfig+0x2cc>)
 8003aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab0:	f003 030c 	and.w	r3, r3, #12
 8003ab4:	2b0c      	cmp	r3, #12
 8003ab6:	d82d      	bhi.n	8003b14 <UART_SetConfig+0x14c>
 8003ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac0 <UART_SetConfig+0xf8>)
 8003aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abe:	bf00      	nop
 8003ac0:	08003af5 	.word	0x08003af5
 8003ac4:	08003b15 	.word	0x08003b15
 8003ac8:	08003b15 	.word	0x08003b15
 8003acc:	08003b15 	.word	0x08003b15
 8003ad0:	08003b05 	.word	0x08003b05
 8003ad4:	08003b15 	.word	0x08003b15
 8003ad8:	08003b15 	.word	0x08003b15
 8003adc:	08003b15 	.word	0x08003b15
 8003ae0:	08003afd 	.word	0x08003afd
 8003ae4:	08003b15 	.word	0x08003b15
 8003ae8:	08003b15 	.word	0x08003b15
 8003aec:	08003b15 	.word	0x08003b15
 8003af0:	08003b0d 	.word	0x08003b0d
 8003af4:	2300      	movs	r3, #0
 8003af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003afa:	e0d8      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003afc:	2302      	movs	r3, #2
 8003afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b02:	e0d4      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003b04:	2304      	movs	r3, #4
 8003b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b0a:	e0d0      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003b0c:	2308      	movs	r3, #8
 8003b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b12:	e0cc      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003b14:	2310      	movs	r3, #16
 8003b16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b1a:	e0c8      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a5e      	ldr	r2, [pc, #376]	@ (8003c9c <UART_SetConfig+0x2d4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d125      	bne.n	8003b72 <UART_SetConfig+0x1aa>
 8003b26:	4b5b      	ldr	r3, [pc, #364]	@ (8003c94 <UART_SetConfig+0x2cc>)
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b30:	2b30      	cmp	r3, #48	@ 0x30
 8003b32:	d016      	beq.n	8003b62 <UART_SetConfig+0x19a>
 8003b34:	2b30      	cmp	r3, #48	@ 0x30
 8003b36:	d818      	bhi.n	8003b6a <UART_SetConfig+0x1a2>
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d00a      	beq.n	8003b52 <UART_SetConfig+0x18a>
 8003b3c:	2b20      	cmp	r3, #32
 8003b3e:	d814      	bhi.n	8003b6a <UART_SetConfig+0x1a2>
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <UART_SetConfig+0x182>
 8003b44:	2b10      	cmp	r3, #16
 8003b46:	d008      	beq.n	8003b5a <UART_SetConfig+0x192>
 8003b48:	e00f      	b.n	8003b6a <UART_SetConfig+0x1a2>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b50:	e0ad      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003b52:	2302      	movs	r3, #2
 8003b54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b58:	e0a9      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b60:	e0a5      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003b62:	2308      	movs	r3, #8
 8003b64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b68:	e0a1      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003b6a:	2310      	movs	r3, #16
 8003b6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b70:	e09d      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a4a      	ldr	r2, [pc, #296]	@ (8003ca0 <UART_SetConfig+0x2d8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d125      	bne.n	8003bc8 <UART_SetConfig+0x200>
 8003b7c:	4b45      	ldr	r3, [pc, #276]	@ (8003c94 <UART_SetConfig+0x2cc>)
 8003b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b86:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b88:	d016      	beq.n	8003bb8 <UART_SetConfig+0x1f0>
 8003b8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b8c:	d818      	bhi.n	8003bc0 <UART_SetConfig+0x1f8>
 8003b8e:	2b80      	cmp	r3, #128	@ 0x80
 8003b90:	d00a      	beq.n	8003ba8 <UART_SetConfig+0x1e0>
 8003b92:	2b80      	cmp	r3, #128	@ 0x80
 8003b94:	d814      	bhi.n	8003bc0 <UART_SetConfig+0x1f8>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <UART_SetConfig+0x1d8>
 8003b9a:	2b40      	cmp	r3, #64	@ 0x40
 8003b9c:	d008      	beq.n	8003bb0 <UART_SetConfig+0x1e8>
 8003b9e:	e00f      	b.n	8003bc0 <UART_SetConfig+0x1f8>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ba6:	e082      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bae:	e07e      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003bb0:	2304      	movs	r3, #4
 8003bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bb6:	e07a      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003bb8:	2308      	movs	r3, #8
 8003bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bbe:	e076      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003bc0:	2310      	movs	r3, #16
 8003bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bc6:	e072      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a35      	ldr	r2, [pc, #212]	@ (8003ca4 <UART_SetConfig+0x2dc>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d12a      	bne.n	8003c28 <UART_SetConfig+0x260>
 8003bd2:	4b30      	ldr	r3, [pc, #192]	@ (8003c94 <UART_SetConfig+0x2cc>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003be0:	d01a      	beq.n	8003c18 <UART_SetConfig+0x250>
 8003be2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003be6:	d81b      	bhi.n	8003c20 <UART_SetConfig+0x258>
 8003be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bec:	d00c      	beq.n	8003c08 <UART_SetConfig+0x240>
 8003bee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bf2:	d815      	bhi.n	8003c20 <UART_SetConfig+0x258>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <UART_SetConfig+0x238>
 8003bf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bfc:	d008      	beq.n	8003c10 <UART_SetConfig+0x248>
 8003bfe:	e00f      	b.n	8003c20 <UART_SetConfig+0x258>
 8003c00:	2300      	movs	r3, #0
 8003c02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c06:	e052      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c0e:	e04e      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003c10:	2304      	movs	r3, #4
 8003c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c16:	e04a      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003c18:	2308      	movs	r3, #8
 8003c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c1e:	e046      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003c20:	2310      	movs	r3, #16
 8003c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c26:	e042      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a17      	ldr	r2, [pc, #92]	@ (8003c8c <UART_SetConfig+0x2c4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d13a      	bne.n	8003ca8 <UART_SetConfig+0x2e0>
 8003c32:	4b18      	ldr	r3, [pc, #96]	@ (8003c94 <UART_SetConfig+0x2cc>)
 8003c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c38:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c40:	d01a      	beq.n	8003c78 <UART_SetConfig+0x2b0>
 8003c42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c46:	d81b      	bhi.n	8003c80 <UART_SetConfig+0x2b8>
 8003c48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c4c:	d00c      	beq.n	8003c68 <UART_SetConfig+0x2a0>
 8003c4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c52:	d815      	bhi.n	8003c80 <UART_SetConfig+0x2b8>
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <UART_SetConfig+0x298>
 8003c58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c5c:	d008      	beq.n	8003c70 <UART_SetConfig+0x2a8>
 8003c5e:	e00f      	b.n	8003c80 <UART_SetConfig+0x2b8>
 8003c60:	2300      	movs	r3, #0
 8003c62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c66:	e022      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c6e:	e01e      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003c70:	2304      	movs	r3, #4
 8003c72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c76:	e01a      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003c78:	2308      	movs	r3, #8
 8003c7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c7e:	e016      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003c80:	2310      	movs	r3, #16
 8003c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c86:	e012      	b.n	8003cae <UART_SetConfig+0x2e6>
 8003c88:	efff69f3 	.word	0xefff69f3
 8003c8c:	40008000 	.word	0x40008000
 8003c90:	40013800 	.word	0x40013800
 8003c94:	40021000 	.word	0x40021000
 8003c98:	40004400 	.word	0x40004400
 8003c9c:	40004800 	.word	0x40004800
 8003ca0:	40004c00 	.word	0x40004c00
 8003ca4:	40005000 	.word	0x40005000
 8003ca8:	2310      	movs	r3, #16
 8003caa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a9f      	ldr	r2, [pc, #636]	@ (8003f30 <UART_SetConfig+0x568>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d17a      	bne.n	8003dae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cb8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d824      	bhi.n	8003d0a <UART_SetConfig+0x342>
 8003cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc8 <UART_SetConfig+0x300>)
 8003cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc6:	bf00      	nop
 8003cc8:	08003ced 	.word	0x08003ced
 8003ccc:	08003d0b 	.word	0x08003d0b
 8003cd0:	08003cf5 	.word	0x08003cf5
 8003cd4:	08003d0b 	.word	0x08003d0b
 8003cd8:	08003cfb 	.word	0x08003cfb
 8003cdc:	08003d0b 	.word	0x08003d0b
 8003ce0:	08003d0b 	.word	0x08003d0b
 8003ce4:	08003d0b 	.word	0x08003d0b
 8003ce8:	08003d03 	.word	0x08003d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cec:	f7fe fd70 	bl	80027d0 <HAL_RCC_GetPCLK1Freq>
 8003cf0:	61f8      	str	r0, [r7, #28]
        break;
 8003cf2:	e010      	b.n	8003d16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cf4:	4b8f      	ldr	r3, [pc, #572]	@ (8003f34 <UART_SetConfig+0x56c>)
 8003cf6:	61fb      	str	r3, [r7, #28]
        break;
 8003cf8:	e00d      	b.n	8003d16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cfa:	f7fe fcd1 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 8003cfe:	61f8      	str	r0, [r7, #28]
        break;
 8003d00:	e009      	b.n	8003d16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d06:	61fb      	str	r3, [r7, #28]
        break;
 8003d08:	e005      	b.n	8003d16 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80fb 	beq.w	8003f14 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	4613      	mov	r3, r2
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	4413      	add	r3, r2
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d305      	bcc.n	8003d3a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d34:	69fa      	ldr	r2, [r7, #28]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d903      	bls.n	8003d42 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d40:	e0e8      	b.n	8003f14 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	2200      	movs	r2, #0
 8003d46:	461c      	mov	r4, r3
 8003d48:	4615      	mov	r5, r2
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	f04f 0300 	mov.w	r3, #0
 8003d52:	022b      	lsls	r3, r5, #8
 8003d54:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d58:	0222      	lsls	r2, r4, #8
 8003d5a:	68f9      	ldr	r1, [r7, #12]
 8003d5c:	6849      	ldr	r1, [r1, #4]
 8003d5e:	0849      	lsrs	r1, r1, #1
 8003d60:	2000      	movs	r0, #0
 8003d62:	4688      	mov	r8, r1
 8003d64:	4681      	mov	r9, r0
 8003d66:	eb12 0a08 	adds.w	sl, r2, r8
 8003d6a:	eb43 0b09 	adc.w	fp, r3, r9
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	603b      	str	r3, [r7, #0]
 8003d76:	607a      	str	r2, [r7, #4]
 8003d78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d7c:	4650      	mov	r0, sl
 8003d7e:	4659      	mov	r1, fp
 8003d80:	f7fc fa2a 	bl	80001d8 <__aeabi_uldivmod>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4613      	mov	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d92:	d308      	bcc.n	8003da6 <UART_SetConfig+0x3de>
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d9a:	d204      	bcs.n	8003da6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	60da      	str	r2, [r3, #12]
 8003da4:	e0b6      	b.n	8003f14 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003dac:	e0b2      	b.n	8003f14 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003db6:	d15e      	bne.n	8003e76 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003db8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d828      	bhi.n	8003e12 <UART_SetConfig+0x44a>
 8003dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc8 <UART_SetConfig+0x400>)
 8003dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc6:	bf00      	nop
 8003dc8:	08003ded 	.word	0x08003ded
 8003dcc:	08003df5 	.word	0x08003df5
 8003dd0:	08003dfd 	.word	0x08003dfd
 8003dd4:	08003e13 	.word	0x08003e13
 8003dd8:	08003e03 	.word	0x08003e03
 8003ddc:	08003e13 	.word	0x08003e13
 8003de0:	08003e13 	.word	0x08003e13
 8003de4:	08003e13 	.word	0x08003e13
 8003de8:	08003e0b 	.word	0x08003e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dec:	f7fe fcf0 	bl	80027d0 <HAL_RCC_GetPCLK1Freq>
 8003df0:	61f8      	str	r0, [r7, #28]
        break;
 8003df2:	e014      	b.n	8003e1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003df4:	f7fe fd02 	bl	80027fc <HAL_RCC_GetPCLK2Freq>
 8003df8:	61f8      	str	r0, [r7, #28]
        break;
 8003dfa:	e010      	b.n	8003e1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dfc:	4b4d      	ldr	r3, [pc, #308]	@ (8003f34 <UART_SetConfig+0x56c>)
 8003dfe:	61fb      	str	r3, [r7, #28]
        break;
 8003e00:	e00d      	b.n	8003e1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e02:	f7fe fc4d 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 8003e06:	61f8      	str	r0, [r7, #28]
        break;
 8003e08:	e009      	b.n	8003e1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e0e:	61fb      	str	r3, [r7, #28]
        break;
 8003e10:	e005      	b.n	8003e1e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d077      	beq.n	8003f14 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	005a      	lsls	r2, r3, #1
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	085b      	lsrs	r3, r3, #1
 8003e2e:	441a      	add	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e38:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	2b0f      	cmp	r3, #15
 8003e3e:	d916      	bls.n	8003e6e <UART_SetConfig+0x4a6>
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e46:	d212      	bcs.n	8003e6e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	f023 030f 	bic.w	r3, r3, #15
 8003e50:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	085b      	lsrs	r3, r3, #1
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	8afb      	ldrh	r3, [r7, #22]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	8afa      	ldrh	r2, [r7, #22]
 8003e6a:	60da      	str	r2, [r3, #12]
 8003e6c:	e052      	b.n	8003f14 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e74:	e04e      	b.n	8003f14 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e76:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d827      	bhi.n	8003ece <UART_SetConfig+0x506>
 8003e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e84 <UART_SetConfig+0x4bc>)
 8003e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e84:	08003ea9 	.word	0x08003ea9
 8003e88:	08003eb1 	.word	0x08003eb1
 8003e8c:	08003eb9 	.word	0x08003eb9
 8003e90:	08003ecf 	.word	0x08003ecf
 8003e94:	08003ebf 	.word	0x08003ebf
 8003e98:	08003ecf 	.word	0x08003ecf
 8003e9c:	08003ecf 	.word	0x08003ecf
 8003ea0:	08003ecf 	.word	0x08003ecf
 8003ea4:	08003ec7 	.word	0x08003ec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ea8:	f7fe fc92 	bl	80027d0 <HAL_RCC_GetPCLK1Freq>
 8003eac:	61f8      	str	r0, [r7, #28]
        break;
 8003eae:	e014      	b.n	8003eda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003eb0:	f7fe fca4 	bl	80027fc <HAL_RCC_GetPCLK2Freq>
 8003eb4:	61f8      	str	r0, [r7, #28]
        break;
 8003eb6:	e010      	b.n	8003eda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eb8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f34 <UART_SetConfig+0x56c>)
 8003eba:	61fb      	str	r3, [r7, #28]
        break;
 8003ebc:	e00d      	b.n	8003eda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ebe:	f7fe fbef 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 8003ec2:	61f8      	str	r0, [r7, #28]
        break;
 8003ec4:	e009      	b.n	8003eda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ec6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eca:	61fb      	str	r3, [r7, #28]
        break;
 8003ecc:	e005      	b.n	8003eda <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003ed8:	bf00      	nop
    }

    if (pclk != 0U)
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d019      	beq.n	8003f14 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	085a      	lsrs	r2, r3, #1
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	441a      	add	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	2b0f      	cmp	r3, #15
 8003ef8:	d909      	bls.n	8003f0e <UART_SetConfig+0x546>
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f00:	d205      	bcs.n	8003f0e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	60da      	str	r2, [r3, #12]
 8003f0c:	e002      	b.n	8003f14 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f20:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3728      	adds	r7, #40	@ 0x28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f2e:	bf00      	nop
 8003f30:	40008000 	.word	0x40008000
 8003f34:	00f42400 	.word	0x00f42400

08003f38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f44:	f003 0308 	and.w	r3, r3, #8
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00a      	beq.n	8003f62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003faa:	f003 0304 	and.w	r3, r3, #4
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fcc:	f003 0310 	and.w	r3, r3, #16
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fee:	f003 0320 	and.w	r3, r3, #32
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004014:	2b00      	cmp	r3, #0
 8004016:	d01a      	beq.n	800404e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004032:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004036:	d10a      	bne.n	800404e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	605a      	str	r2, [r3, #4]
  }
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b098      	sub	sp, #96	@ 0x60
 8004080:	af02      	add	r7, sp, #8
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800408c:	f7fc fe8a 	bl	8000da4 <HAL_GetTick>
 8004090:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	2b08      	cmp	r3, #8
 800409e:	d12e      	bne.n	80040fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a8:	2200      	movs	r2, #0
 80040aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f88c 	bl	80041cc <UART_WaitOnFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d021      	beq.n	80040fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c2:	e853 3f00 	ldrex	r3, [r3]
 80040c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	461a      	mov	r2, r3
 80040d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80040da:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040e0:	e841 2300 	strex	r3, r2, [r1]
 80040e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1e6      	bne.n	80040ba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2220      	movs	r2, #32
 80040f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e062      	b.n	80041c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b04      	cmp	r3, #4
 800410a:	d149      	bne.n	80041a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800410c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004114:	2200      	movs	r2, #0
 8004116:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f856 	bl	80041cc <UART_WaitOnFlagUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d03c      	beq.n	80041a0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412e:	e853 3f00 	ldrex	r3, [r3]
 8004132:	623b      	str	r3, [r7, #32]
   return(result);
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800413a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	461a      	mov	r2, r3
 8004142:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004144:	633b      	str	r3, [r7, #48]	@ 0x30
 8004146:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004148:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800414a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800414c:	e841 2300 	strex	r3, r2, [r1]
 8004150:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1e6      	bne.n	8004126 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3308      	adds	r3, #8
 800415e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	e853 3f00 	ldrex	r3, [r3]
 8004166:	60fb      	str	r3, [r7, #12]
   return(result);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0301 	bic.w	r3, r3, #1
 800416e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3308      	adds	r3, #8
 8004176:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004178:	61fa      	str	r2, [r7, #28]
 800417a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417c:	69b9      	ldr	r1, [r7, #24]
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	e841 2300 	strex	r3, r2, [r1]
 8004184:	617b      	str	r3, [r7, #20]
   return(result);
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1e5      	bne.n	8004158 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2220      	movs	r2, #32
 8004190:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e011      	b.n	80041c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3758      	adds	r7, #88	@ 0x58
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	603b      	str	r3, [r7, #0]
 80041d8:	4613      	mov	r3, r2
 80041da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041dc:	e049      	b.n	8004272 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e4:	d045      	beq.n	8004272 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e6:	f7fc fddd 	bl	8000da4 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d302      	bcc.n	80041fc <UART_WaitOnFlagUntilTimeout+0x30>
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e048      	b.n	8004292 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0304 	and.w	r3, r3, #4
 800420a:	2b00      	cmp	r3, #0
 800420c:	d031      	beq.n	8004272 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	2b08      	cmp	r3, #8
 800421a:	d110      	bne.n	800423e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2208      	movs	r2, #8
 8004222:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 f838 	bl	800429a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2208      	movs	r2, #8
 800422e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e029      	b.n	8004292 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004248:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800424c:	d111      	bne.n	8004272 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004256:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f81e 	bl	800429a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2220      	movs	r2, #32
 8004262:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e00f      	b.n	8004292 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69da      	ldr	r2, [r3, #28]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	4013      	ands	r3, r2
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	429a      	cmp	r2, r3
 8004280:	bf0c      	ite	eq
 8004282:	2301      	moveq	r3, #1
 8004284:	2300      	movne	r3, #0
 8004286:	b2db      	uxtb	r3, r3
 8004288:	461a      	mov	r2, r3
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	429a      	cmp	r2, r3
 800428e:	d0a6      	beq.n	80041de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800429a:	b480      	push	{r7}
 800429c:	b095      	sub	sp, #84	@ 0x54
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042aa:	e853 3f00 	ldrex	r3, [r3]
 80042ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80042c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042c8:	e841 2300 	strex	r3, r2, [r1]
 80042cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1e6      	bne.n	80042a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3308      	adds	r3, #8
 80042da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	e853 3f00 	ldrex	r3, [r3]
 80042e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f023 0301 	bic.w	r3, r3, #1
 80042ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3308      	adds	r3, #8
 80042f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042fc:	e841 2300 	strex	r3, r2, [r1]
 8004300:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1e5      	bne.n	80042d4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800430c:	2b01      	cmp	r3, #1
 800430e:	d118      	bne.n	8004342 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	60bb      	str	r3, [r7, #8]
   return(result);
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f023 0310 	bic.w	r3, r3, #16
 8004324:	647b      	str	r3, [r7, #68]	@ 0x44
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800432e:	61bb      	str	r3, [r7, #24]
 8004330:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004332:	6979      	ldr	r1, [r7, #20]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	e841 2300 	strex	r3, r2, [r1]
 800433a:	613b      	str	r3, [r7, #16]
   return(result);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1e6      	bne.n	8004310 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2220      	movs	r2, #32
 8004346:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004356:	bf00      	nop
 8004358:	3754      	adds	r7, #84	@ 0x54
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
	...

08004364 <std>:
 8004364:	2300      	movs	r3, #0
 8004366:	b510      	push	{r4, lr}
 8004368:	4604      	mov	r4, r0
 800436a:	e9c0 3300 	strd	r3, r3, [r0]
 800436e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004372:	6083      	str	r3, [r0, #8]
 8004374:	8181      	strh	r1, [r0, #12]
 8004376:	6643      	str	r3, [r0, #100]	@ 0x64
 8004378:	81c2      	strh	r2, [r0, #14]
 800437a:	6183      	str	r3, [r0, #24]
 800437c:	4619      	mov	r1, r3
 800437e:	2208      	movs	r2, #8
 8004380:	305c      	adds	r0, #92	@ 0x5c
 8004382:	f000 f9e7 	bl	8004754 <memset>
 8004386:	4b0d      	ldr	r3, [pc, #52]	@ (80043bc <std+0x58>)
 8004388:	6263      	str	r3, [r4, #36]	@ 0x24
 800438a:	4b0d      	ldr	r3, [pc, #52]	@ (80043c0 <std+0x5c>)
 800438c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800438e:	4b0d      	ldr	r3, [pc, #52]	@ (80043c4 <std+0x60>)
 8004390:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004392:	4b0d      	ldr	r3, [pc, #52]	@ (80043c8 <std+0x64>)
 8004394:	6323      	str	r3, [r4, #48]	@ 0x30
 8004396:	4b0d      	ldr	r3, [pc, #52]	@ (80043cc <std+0x68>)
 8004398:	6224      	str	r4, [r4, #32]
 800439a:	429c      	cmp	r4, r3
 800439c:	d006      	beq.n	80043ac <std+0x48>
 800439e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80043a2:	4294      	cmp	r4, r2
 80043a4:	d002      	beq.n	80043ac <std+0x48>
 80043a6:	33d0      	adds	r3, #208	@ 0xd0
 80043a8:	429c      	cmp	r4, r3
 80043aa:	d105      	bne.n	80043b8 <std+0x54>
 80043ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80043b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043b4:	f000 ba46 	b.w	8004844 <__retarget_lock_init_recursive>
 80043b8:	bd10      	pop	{r4, pc}
 80043ba:	bf00      	nop
 80043bc:	080045a5 	.word	0x080045a5
 80043c0:	080045c7 	.word	0x080045c7
 80043c4:	080045ff 	.word	0x080045ff
 80043c8:	08004623 	.word	0x08004623
 80043cc:	20000188 	.word	0x20000188

080043d0 <stdio_exit_handler>:
 80043d0:	4a02      	ldr	r2, [pc, #8]	@ (80043dc <stdio_exit_handler+0xc>)
 80043d2:	4903      	ldr	r1, [pc, #12]	@ (80043e0 <stdio_exit_handler+0x10>)
 80043d4:	4803      	ldr	r0, [pc, #12]	@ (80043e4 <stdio_exit_handler+0x14>)
 80043d6:	f000 b869 	b.w	80044ac <_fwalk_sglue>
 80043da:	bf00      	nop
 80043dc:	2000000c 	.word	0x2000000c
 80043e0:	08004b45 	.word	0x08004b45
 80043e4:	2000001c 	.word	0x2000001c

080043e8 <cleanup_stdio>:
 80043e8:	6841      	ldr	r1, [r0, #4]
 80043ea:	4b0c      	ldr	r3, [pc, #48]	@ (800441c <cleanup_stdio+0x34>)
 80043ec:	4299      	cmp	r1, r3
 80043ee:	b510      	push	{r4, lr}
 80043f0:	4604      	mov	r4, r0
 80043f2:	d001      	beq.n	80043f8 <cleanup_stdio+0x10>
 80043f4:	f000 fba6 	bl	8004b44 <_fflush_r>
 80043f8:	68a1      	ldr	r1, [r4, #8]
 80043fa:	4b09      	ldr	r3, [pc, #36]	@ (8004420 <cleanup_stdio+0x38>)
 80043fc:	4299      	cmp	r1, r3
 80043fe:	d002      	beq.n	8004406 <cleanup_stdio+0x1e>
 8004400:	4620      	mov	r0, r4
 8004402:	f000 fb9f 	bl	8004b44 <_fflush_r>
 8004406:	68e1      	ldr	r1, [r4, #12]
 8004408:	4b06      	ldr	r3, [pc, #24]	@ (8004424 <cleanup_stdio+0x3c>)
 800440a:	4299      	cmp	r1, r3
 800440c:	d004      	beq.n	8004418 <cleanup_stdio+0x30>
 800440e:	4620      	mov	r0, r4
 8004410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004414:	f000 bb96 	b.w	8004b44 <_fflush_r>
 8004418:	bd10      	pop	{r4, pc}
 800441a:	bf00      	nop
 800441c:	20000188 	.word	0x20000188
 8004420:	200001f0 	.word	0x200001f0
 8004424:	20000258 	.word	0x20000258

08004428 <global_stdio_init.part.0>:
 8004428:	b510      	push	{r4, lr}
 800442a:	4b0b      	ldr	r3, [pc, #44]	@ (8004458 <global_stdio_init.part.0+0x30>)
 800442c:	4c0b      	ldr	r4, [pc, #44]	@ (800445c <global_stdio_init.part.0+0x34>)
 800442e:	4a0c      	ldr	r2, [pc, #48]	@ (8004460 <global_stdio_init.part.0+0x38>)
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	4620      	mov	r0, r4
 8004434:	2200      	movs	r2, #0
 8004436:	2104      	movs	r1, #4
 8004438:	f7ff ff94 	bl	8004364 <std>
 800443c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004440:	2201      	movs	r2, #1
 8004442:	2109      	movs	r1, #9
 8004444:	f7ff ff8e 	bl	8004364 <std>
 8004448:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800444c:	2202      	movs	r2, #2
 800444e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004452:	2112      	movs	r1, #18
 8004454:	f7ff bf86 	b.w	8004364 <std>
 8004458:	200002c0 	.word	0x200002c0
 800445c:	20000188 	.word	0x20000188
 8004460:	080043d1 	.word	0x080043d1

08004464 <__sfp_lock_acquire>:
 8004464:	4801      	ldr	r0, [pc, #4]	@ (800446c <__sfp_lock_acquire+0x8>)
 8004466:	f000 b9ee 	b.w	8004846 <__retarget_lock_acquire_recursive>
 800446a:	bf00      	nop
 800446c:	200002c9 	.word	0x200002c9

08004470 <__sfp_lock_release>:
 8004470:	4801      	ldr	r0, [pc, #4]	@ (8004478 <__sfp_lock_release+0x8>)
 8004472:	f000 b9e9 	b.w	8004848 <__retarget_lock_release_recursive>
 8004476:	bf00      	nop
 8004478:	200002c9 	.word	0x200002c9

0800447c <__sinit>:
 800447c:	b510      	push	{r4, lr}
 800447e:	4604      	mov	r4, r0
 8004480:	f7ff fff0 	bl	8004464 <__sfp_lock_acquire>
 8004484:	6a23      	ldr	r3, [r4, #32]
 8004486:	b11b      	cbz	r3, 8004490 <__sinit+0x14>
 8004488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800448c:	f7ff bff0 	b.w	8004470 <__sfp_lock_release>
 8004490:	4b04      	ldr	r3, [pc, #16]	@ (80044a4 <__sinit+0x28>)
 8004492:	6223      	str	r3, [r4, #32]
 8004494:	4b04      	ldr	r3, [pc, #16]	@ (80044a8 <__sinit+0x2c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1f5      	bne.n	8004488 <__sinit+0xc>
 800449c:	f7ff ffc4 	bl	8004428 <global_stdio_init.part.0>
 80044a0:	e7f2      	b.n	8004488 <__sinit+0xc>
 80044a2:	bf00      	nop
 80044a4:	080043e9 	.word	0x080043e9
 80044a8:	200002c0 	.word	0x200002c0

080044ac <_fwalk_sglue>:
 80044ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044b0:	4607      	mov	r7, r0
 80044b2:	4688      	mov	r8, r1
 80044b4:	4614      	mov	r4, r2
 80044b6:	2600      	movs	r6, #0
 80044b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044bc:	f1b9 0901 	subs.w	r9, r9, #1
 80044c0:	d505      	bpl.n	80044ce <_fwalk_sglue+0x22>
 80044c2:	6824      	ldr	r4, [r4, #0]
 80044c4:	2c00      	cmp	r4, #0
 80044c6:	d1f7      	bne.n	80044b8 <_fwalk_sglue+0xc>
 80044c8:	4630      	mov	r0, r6
 80044ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044ce:	89ab      	ldrh	r3, [r5, #12]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d907      	bls.n	80044e4 <_fwalk_sglue+0x38>
 80044d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044d8:	3301      	adds	r3, #1
 80044da:	d003      	beq.n	80044e4 <_fwalk_sglue+0x38>
 80044dc:	4629      	mov	r1, r5
 80044de:	4638      	mov	r0, r7
 80044e0:	47c0      	blx	r8
 80044e2:	4306      	orrs	r6, r0
 80044e4:	3568      	adds	r5, #104	@ 0x68
 80044e6:	e7e9      	b.n	80044bc <_fwalk_sglue+0x10>

080044e8 <_puts_r>:
 80044e8:	6a03      	ldr	r3, [r0, #32]
 80044ea:	b570      	push	{r4, r5, r6, lr}
 80044ec:	6884      	ldr	r4, [r0, #8]
 80044ee:	4605      	mov	r5, r0
 80044f0:	460e      	mov	r6, r1
 80044f2:	b90b      	cbnz	r3, 80044f8 <_puts_r+0x10>
 80044f4:	f7ff ffc2 	bl	800447c <__sinit>
 80044f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044fa:	07db      	lsls	r3, r3, #31
 80044fc:	d405      	bmi.n	800450a <_puts_r+0x22>
 80044fe:	89a3      	ldrh	r3, [r4, #12]
 8004500:	0598      	lsls	r0, r3, #22
 8004502:	d402      	bmi.n	800450a <_puts_r+0x22>
 8004504:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004506:	f000 f99e 	bl	8004846 <__retarget_lock_acquire_recursive>
 800450a:	89a3      	ldrh	r3, [r4, #12]
 800450c:	0719      	lsls	r1, r3, #28
 800450e:	d502      	bpl.n	8004516 <_puts_r+0x2e>
 8004510:	6923      	ldr	r3, [r4, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d135      	bne.n	8004582 <_puts_r+0x9a>
 8004516:	4621      	mov	r1, r4
 8004518:	4628      	mov	r0, r5
 800451a:	f000 f8c5 	bl	80046a8 <__swsetup_r>
 800451e:	b380      	cbz	r0, 8004582 <_puts_r+0x9a>
 8004520:	f04f 35ff 	mov.w	r5, #4294967295
 8004524:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004526:	07da      	lsls	r2, r3, #31
 8004528:	d405      	bmi.n	8004536 <_puts_r+0x4e>
 800452a:	89a3      	ldrh	r3, [r4, #12]
 800452c:	059b      	lsls	r3, r3, #22
 800452e:	d402      	bmi.n	8004536 <_puts_r+0x4e>
 8004530:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004532:	f000 f989 	bl	8004848 <__retarget_lock_release_recursive>
 8004536:	4628      	mov	r0, r5
 8004538:	bd70      	pop	{r4, r5, r6, pc}
 800453a:	2b00      	cmp	r3, #0
 800453c:	da04      	bge.n	8004548 <_puts_r+0x60>
 800453e:	69a2      	ldr	r2, [r4, #24]
 8004540:	429a      	cmp	r2, r3
 8004542:	dc17      	bgt.n	8004574 <_puts_r+0x8c>
 8004544:	290a      	cmp	r1, #10
 8004546:	d015      	beq.n	8004574 <_puts_r+0x8c>
 8004548:	6823      	ldr	r3, [r4, #0]
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	6022      	str	r2, [r4, #0]
 800454e:	7019      	strb	r1, [r3, #0]
 8004550:	68a3      	ldr	r3, [r4, #8]
 8004552:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004556:	3b01      	subs	r3, #1
 8004558:	60a3      	str	r3, [r4, #8]
 800455a:	2900      	cmp	r1, #0
 800455c:	d1ed      	bne.n	800453a <_puts_r+0x52>
 800455e:	2b00      	cmp	r3, #0
 8004560:	da11      	bge.n	8004586 <_puts_r+0x9e>
 8004562:	4622      	mov	r2, r4
 8004564:	210a      	movs	r1, #10
 8004566:	4628      	mov	r0, r5
 8004568:	f000 f85f 	bl	800462a <__swbuf_r>
 800456c:	3001      	adds	r0, #1
 800456e:	d0d7      	beq.n	8004520 <_puts_r+0x38>
 8004570:	250a      	movs	r5, #10
 8004572:	e7d7      	b.n	8004524 <_puts_r+0x3c>
 8004574:	4622      	mov	r2, r4
 8004576:	4628      	mov	r0, r5
 8004578:	f000 f857 	bl	800462a <__swbuf_r>
 800457c:	3001      	adds	r0, #1
 800457e:	d1e7      	bne.n	8004550 <_puts_r+0x68>
 8004580:	e7ce      	b.n	8004520 <_puts_r+0x38>
 8004582:	3e01      	subs	r6, #1
 8004584:	e7e4      	b.n	8004550 <_puts_r+0x68>
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	6022      	str	r2, [r4, #0]
 800458c:	220a      	movs	r2, #10
 800458e:	701a      	strb	r2, [r3, #0]
 8004590:	e7ee      	b.n	8004570 <_puts_r+0x88>
	...

08004594 <puts>:
 8004594:	4b02      	ldr	r3, [pc, #8]	@ (80045a0 <puts+0xc>)
 8004596:	4601      	mov	r1, r0
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	f7ff bfa5 	b.w	80044e8 <_puts_r>
 800459e:	bf00      	nop
 80045a0:	20000018 	.word	0x20000018

080045a4 <__sread>:
 80045a4:	b510      	push	{r4, lr}
 80045a6:	460c      	mov	r4, r1
 80045a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ac:	f000 f8fc 	bl	80047a8 <_read_r>
 80045b0:	2800      	cmp	r0, #0
 80045b2:	bfab      	itete	ge
 80045b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80045b6:	89a3      	ldrhlt	r3, [r4, #12]
 80045b8:	181b      	addge	r3, r3, r0
 80045ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80045be:	bfac      	ite	ge
 80045c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80045c2:	81a3      	strhlt	r3, [r4, #12]
 80045c4:	bd10      	pop	{r4, pc}

080045c6 <__swrite>:
 80045c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ca:	461f      	mov	r7, r3
 80045cc:	898b      	ldrh	r3, [r1, #12]
 80045ce:	05db      	lsls	r3, r3, #23
 80045d0:	4605      	mov	r5, r0
 80045d2:	460c      	mov	r4, r1
 80045d4:	4616      	mov	r6, r2
 80045d6:	d505      	bpl.n	80045e4 <__swrite+0x1e>
 80045d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045dc:	2302      	movs	r3, #2
 80045de:	2200      	movs	r2, #0
 80045e0:	f000 f8d0 	bl	8004784 <_lseek_r>
 80045e4:	89a3      	ldrh	r3, [r4, #12]
 80045e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045ee:	81a3      	strh	r3, [r4, #12]
 80045f0:	4632      	mov	r2, r6
 80045f2:	463b      	mov	r3, r7
 80045f4:	4628      	mov	r0, r5
 80045f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045fa:	f000 b8e7 	b.w	80047cc <_write_r>

080045fe <__sseek>:
 80045fe:	b510      	push	{r4, lr}
 8004600:	460c      	mov	r4, r1
 8004602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004606:	f000 f8bd 	bl	8004784 <_lseek_r>
 800460a:	1c43      	adds	r3, r0, #1
 800460c:	89a3      	ldrh	r3, [r4, #12]
 800460e:	bf15      	itete	ne
 8004610:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004612:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004616:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800461a:	81a3      	strheq	r3, [r4, #12]
 800461c:	bf18      	it	ne
 800461e:	81a3      	strhne	r3, [r4, #12]
 8004620:	bd10      	pop	{r4, pc}

08004622 <__sclose>:
 8004622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004626:	f000 b89d 	b.w	8004764 <_close_r>

0800462a <__swbuf_r>:
 800462a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462c:	460e      	mov	r6, r1
 800462e:	4614      	mov	r4, r2
 8004630:	4605      	mov	r5, r0
 8004632:	b118      	cbz	r0, 800463c <__swbuf_r+0x12>
 8004634:	6a03      	ldr	r3, [r0, #32]
 8004636:	b90b      	cbnz	r3, 800463c <__swbuf_r+0x12>
 8004638:	f7ff ff20 	bl	800447c <__sinit>
 800463c:	69a3      	ldr	r3, [r4, #24]
 800463e:	60a3      	str	r3, [r4, #8]
 8004640:	89a3      	ldrh	r3, [r4, #12]
 8004642:	071a      	lsls	r2, r3, #28
 8004644:	d501      	bpl.n	800464a <__swbuf_r+0x20>
 8004646:	6923      	ldr	r3, [r4, #16]
 8004648:	b943      	cbnz	r3, 800465c <__swbuf_r+0x32>
 800464a:	4621      	mov	r1, r4
 800464c:	4628      	mov	r0, r5
 800464e:	f000 f82b 	bl	80046a8 <__swsetup_r>
 8004652:	b118      	cbz	r0, 800465c <__swbuf_r+0x32>
 8004654:	f04f 37ff 	mov.w	r7, #4294967295
 8004658:	4638      	mov	r0, r7
 800465a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	6922      	ldr	r2, [r4, #16]
 8004660:	1a98      	subs	r0, r3, r2
 8004662:	6963      	ldr	r3, [r4, #20]
 8004664:	b2f6      	uxtb	r6, r6
 8004666:	4283      	cmp	r3, r0
 8004668:	4637      	mov	r7, r6
 800466a:	dc05      	bgt.n	8004678 <__swbuf_r+0x4e>
 800466c:	4621      	mov	r1, r4
 800466e:	4628      	mov	r0, r5
 8004670:	f000 fa68 	bl	8004b44 <_fflush_r>
 8004674:	2800      	cmp	r0, #0
 8004676:	d1ed      	bne.n	8004654 <__swbuf_r+0x2a>
 8004678:	68a3      	ldr	r3, [r4, #8]
 800467a:	3b01      	subs	r3, #1
 800467c:	60a3      	str	r3, [r4, #8]
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	6022      	str	r2, [r4, #0]
 8004684:	701e      	strb	r6, [r3, #0]
 8004686:	6962      	ldr	r2, [r4, #20]
 8004688:	1c43      	adds	r3, r0, #1
 800468a:	429a      	cmp	r2, r3
 800468c:	d004      	beq.n	8004698 <__swbuf_r+0x6e>
 800468e:	89a3      	ldrh	r3, [r4, #12]
 8004690:	07db      	lsls	r3, r3, #31
 8004692:	d5e1      	bpl.n	8004658 <__swbuf_r+0x2e>
 8004694:	2e0a      	cmp	r6, #10
 8004696:	d1df      	bne.n	8004658 <__swbuf_r+0x2e>
 8004698:	4621      	mov	r1, r4
 800469a:	4628      	mov	r0, r5
 800469c:	f000 fa52 	bl	8004b44 <_fflush_r>
 80046a0:	2800      	cmp	r0, #0
 80046a2:	d0d9      	beq.n	8004658 <__swbuf_r+0x2e>
 80046a4:	e7d6      	b.n	8004654 <__swbuf_r+0x2a>
	...

080046a8 <__swsetup_r>:
 80046a8:	b538      	push	{r3, r4, r5, lr}
 80046aa:	4b29      	ldr	r3, [pc, #164]	@ (8004750 <__swsetup_r+0xa8>)
 80046ac:	4605      	mov	r5, r0
 80046ae:	6818      	ldr	r0, [r3, #0]
 80046b0:	460c      	mov	r4, r1
 80046b2:	b118      	cbz	r0, 80046bc <__swsetup_r+0x14>
 80046b4:	6a03      	ldr	r3, [r0, #32]
 80046b6:	b90b      	cbnz	r3, 80046bc <__swsetup_r+0x14>
 80046b8:	f7ff fee0 	bl	800447c <__sinit>
 80046bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046c0:	0719      	lsls	r1, r3, #28
 80046c2:	d422      	bmi.n	800470a <__swsetup_r+0x62>
 80046c4:	06da      	lsls	r2, r3, #27
 80046c6:	d407      	bmi.n	80046d8 <__swsetup_r+0x30>
 80046c8:	2209      	movs	r2, #9
 80046ca:	602a      	str	r2, [r5, #0]
 80046cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046d0:	81a3      	strh	r3, [r4, #12]
 80046d2:	f04f 30ff 	mov.w	r0, #4294967295
 80046d6:	e033      	b.n	8004740 <__swsetup_r+0x98>
 80046d8:	0758      	lsls	r0, r3, #29
 80046da:	d512      	bpl.n	8004702 <__swsetup_r+0x5a>
 80046dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80046de:	b141      	cbz	r1, 80046f2 <__swsetup_r+0x4a>
 80046e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80046e4:	4299      	cmp	r1, r3
 80046e6:	d002      	beq.n	80046ee <__swsetup_r+0x46>
 80046e8:	4628      	mov	r0, r5
 80046ea:	f000 f8af 	bl	800484c <_free_r>
 80046ee:	2300      	movs	r3, #0
 80046f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80046f2:	89a3      	ldrh	r3, [r4, #12]
 80046f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80046f8:	81a3      	strh	r3, [r4, #12]
 80046fa:	2300      	movs	r3, #0
 80046fc:	6063      	str	r3, [r4, #4]
 80046fe:	6923      	ldr	r3, [r4, #16]
 8004700:	6023      	str	r3, [r4, #0]
 8004702:	89a3      	ldrh	r3, [r4, #12]
 8004704:	f043 0308 	orr.w	r3, r3, #8
 8004708:	81a3      	strh	r3, [r4, #12]
 800470a:	6923      	ldr	r3, [r4, #16]
 800470c:	b94b      	cbnz	r3, 8004722 <__swsetup_r+0x7a>
 800470e:	89a3      	ldrh	r3, [r4, #12]
 8004710:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004718:	d003      	beq.n	8004722 <__swsetup_r+0x7a>
 800471a:	4621      	mov	r1, r4
 800471c:	4628      	mov	r0, r5
 800471e:	f000 fa5f 	bl	8004be0 <__smakebuf_r>
 8004722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004726:	f013 0201 	ands.w	r2, r3, #1
 800472a:	d00a      	beq.n	8004742 <__swsetup_r+0x9a>
 800472c:	2200      	movs	r2, #0
 800472e:	60a2      	str	r2, [r4, #8]
 8004730:	6962      	ldr	r2, [r4, #20]
 8004732:	4252      	negs	r2, r2
 8004734:	61a2      	str	r2, [r4, #24]
 8004736:	6922      	ldr	r2, [r4, #16]
 8004738:	b942      	cbnz	r2, 800474c <__swsetup_r+0xa4>
 800473a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800473e:	d1c5      	bne.n	80046cc <__swsetup_r+0x24>
 8004740:	bd38      	pop	{r3, r4, r5, pc}
 8004742:	0799      	lsls	r1, r3, #30
 8004744:	bf58      	it	pl
 8004746:	6962      	ldrpl	r2, [r4, #20]
 8004748:	60a2      	str	r2, [r4, #8]
 800474a:	e7f4      	b.n	8004736 <__swsetup_r+0x8e>
 800474c:	2000      	movs	r0, #0
 800474e:	e7f7      	b.n	8004740 <__swsetup_r+0x98>
 8004750:	20000018 	.word	0x20000018

08004754 <memset>:
 8004754:	4402      	add	r2, r0
 8004756:	4603      	mov	r3, r0
 8004758:	4293      	cmp	r3, r2
 800475a:	d100      	bne.n	800475e <memset+0xa>
 800475c:	4770      	bx	lr
 800475e:	f803 1b01 	strb.w	r1, [r3], #1
 8004762:	e7f9      	b.n	8004758 <memset+0x4>

08004764 <_close_r>:
 8004764:	b538      	push	{r3, r4, r5, lr}
 8004766:	4d06      	ldr	r5, [pc, #24]	@ (8004780 <_close_r+0x1c>)
 8004768:	2300      	movs	r3, #0
 800476a:	4604      	mov	r4, r0
 800476c:	4608      	mov	r0, r1
 800476e:	602b      	str	r3, [r5, #0]
 8004770:	f7fc fa01 	bl	8000b76 <_close>
 8004774:	1c43      	adds	r3, r0, #1
 8004776:	d102      	bne.n	800477e <_close_r+0x1a>
 8004778:	682b      	ldr	r3, [r5, #0]
 800477a:	b103      	cbz	r3, 800477e <_close_r+0x1a>
 800477c:	6023      	str	r3, [r4, #0]
 800477e:	bd38      	pop	{r3, r4, r5, pc}
 8004780:	200002c4 	.word	0x200002c4

08004784 <_lseek_r>:
 8004784:	b538      	push	{r3, r4, r5, lr}
 8004786:	4d07      	ldr	r5, [pc, #28]	@ (80047a4 <_lseek_r+0x20>)
 8004788:	4604      	mov	r4, r0
 800478a:	4608      	mov	r0, r1
 800478c:	4611      	mov	r1, r2
 800478e:	2200      	movs	r2, #0
 8004790:	602a      	str	r2, [r5, #0]
 8004792:	461a      	mov	r2, r3
 8004794:	f7fc fa16 	bl	8000bc4 <_lseek>
 8004798:	1c43      	adds	r3, r0, #1
 800479a:	d102      	bne.n	80047a2 <_lseek_r+0x1e>
 800479c:	682b      	ldr	r3, [r5, #0]
 800479e:	b103      	cbz	r3, 80047a2 <_lseek_r+0x1e>
 80047a0:	6023      	str	r3, [r4, #0]
 80047a2:	bd38      	pop	{r3, r4, r5, pc}
 80047a4:	200002c4 	.word	0x200002c4

080047a8 <_read_r>:
 80047a8:	b538      	push	{r3, r4, r5, lr}
 80047aa:	4d07      	ldr	r5, [pc, #28]	@ (80047c8 <_read_r+0x20>)
 80047ac:	4604      	mov	r4, r0
 80047ae:	4608      	mov	r0, r1
 80047b0:	4611      	mov	r1, r2
 80047b2:	2200      	movs	r2, #0
 80047b4:	602a      	str	r2, [r5, #0]
 80047b6:	461a      	mov	r2, r3
 80047b8:	f7fc f9a4 	bl	8000b04 <_read>
 80047bc:	1c43      	adds	r3, r0, #1
 80047be:	d102      	bne.n	80047c6 <_read_r+0x1e>
 80047c0:	682b      	ldr	r3, [r5, #0]
 80047c2:	b103      	cbz	r3, 80047c6 <_read_r+0x1e>
 80047c4:	6023      	str	r3, [r4, #0]
 80047c6:	bd38      	pop	{r3, r4, r5, pc}
 80047c8:	200002c4 	.word	0x200002c4

080047cc <_write_r>:
 80047cc:	b538      	push	{r3, r4, r5, lr}
 80047ce:	4d07      	ldr	r5, [pc, #28]	@ (80047ec <_write_r+0x20>)
 80047d0:	4604      	mov	r4, r0
 80047d2:	4608      	mov	r0, r1
 80047d4:	4611      	mov	r1, r2
 80047d6:	2200      	movs	r2, #0
 80047d8:	602a      	str	r2, [r5, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	f7fc f9af 	bl	8000b3e <_write>
 80047e0:	1c43      	adds	r3, r0, #1
 80047e2:	d102      	bne.n	80047ea <_write_r+0x1e>
 80047e4:	682b      	ldr	r3, [r5, #0]
 80047e6:	b103      	cbz	r3, 80047ea <_write_r+0x1e>
 80047e8:	6023      	str	r3, [r4, #0]
 80047ea:	bd38      	pop	{r3, r4, r5, pc}
 80047ec:	200002c4 	.word	0x200002c4

080047f0 <__errno>:
 80047f0:	4b01      	ldr	r3, [pc, #4]	@ (80047f8 <__errno+0x8>)
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20000018 	.word	0x20000018

080047fc <__libc_init_array>:
 80047fc:	b570      	push	{r4, r5, r6, lr}
 80047fe:	4d0d      	ldr	r5, [pc, #52]	@ (8004834 <__libc_init_array+0x38>)
 8004800:	4c0d      	ldr	r4, [pc, #52]	@ (8004838 <__libc_init_array+0x3c>)
 8004802:	1b64      	subs	r4, r4, r5
 8004804:	10a4      	asrs	r4, r4, #2
 8004806:	2600      	movs	r6, #0
 8004808:	42a6      	cmp	r6, r4
 800480a:	d109      	bne.n	8004820 <__libc_init_array+0x24>
 800480c:	4d0b      	ldr	r5, [pc, #44]	@ (800483c <__libc_init_array+0x40>)
 800480e:	4c0c      	ldr	r4, [pc, #48]	@ (8004840 <__libc_init_array+0x44>)
 8004810:	f000 fa54 	bl	8004cbc <_init>
 8004814:	1b64      	subs	r4, r4, r5
 8004816:	10a4      	asrs	r4, r4, #2
 8004818:	2600      	movs	r6, #0
 800481a:	42a6      	cmp	r6, r4
 800481c:	d105      	bne.n	800482a <__libc_init_array+0x2e>
 800481e:	bd70      	pop	{r4, r5, r6, pc}
 8004820:	f855 3b04 	ldr.w	r3, [r5], #4
 8004824:	4798      	blx	r3
 8004826:	3601      	adds	r6, #1
 8004828:	e7ee      	b.n	8004808 <__libc_init_array+0xc>
 800482a:	f855 3b04 	ldr.w	r3, [r5], #4
 800482e:	4798      	blx	r3
 8004830:	3601      	adds	r6, #1
 8004832:	e7f2      	b.n	800481a <__libc_init_array+0x1e>
 8004834:	08004d34 	.word	0x08004d34
 8004838:	08004d34 	.word	0x08004d34
 800483c:	08004d34 	.word	0x08004d34
 8004840:	08004d38 	.word	0x08004d38

08004844 <__retarget_lock_init_recursive>:
 8004844:	4770      	bx	lr

08004846 <__retarget_lock_acquire_recursive>:
 8004846:	4770      	bx	lr

08004848 <__retarget_lock_release_recursive>:
 8004848:	4770      	bx	lr
	...

0800484c <_free_r>:
 800484c:	b538      	push	{r3, r4, r5, lr}
 800484e:	4605      	mov	r5, r0
 8004850:	2900      	cmp	r1, #0
 8004852:	d041      	beq.n	80048d8 <_free_r+0x8c>
 8004854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004858:	1f0c      	subs	r4, r1, #4
 800485a:	2b00      	cmp	r3, #0
 800485c:	bfb8      	it	lt
 800485e:	18e4      	addlt	r4, r4, r3
 8004860:	f000 f8e0 	bl	8004a24 <__malloc_lock>
 8004864:	4a1d      	ldr	r2, [pc, #116]	@ (80048dc <_free_r+0x90>)
 8004866:	6813      	ldr	r3, [r2, #0]
 8004868:	b933      	cbnz	r3, 8004878 <_free_r+0x2c>
 800486a:	6063      	str	r3, [r4, #4]
 800486c:	6014      	str	r4, [r2, #0]
 800486e:	4628      	mov	r0, r5
 8004870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004874:	f000 b8dc 	b.w	8004a30 <__malloc_unlock>
 8004878:	42a3      	cmp	r3, r4
 800487a:	d908      	bls.n	800488e <_free_r+0x42>
 800487c:	6820      	ldr	r0, [r4, #0]
 800487e:	1821      	adds	r1, r4, r0
 8004880:	428b      	cmp	r3, r1
 8004882:	bf01      	itttt	eq
 8004884:	6819      	ldreq	r1, [r3, #0]
 8004886:	685b      	ldreq	r3, [r3, #4]
 8004888:	1809      	addeq	r1, r1, r0
 800488a:	6021      	streq	r1, [r4, #0]
 800488c:	e7ed      	b.n	800486a <_free_r+0x1e>
 800488e:	461a      	mov	r2, r3
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	b10b      	cbz	r3, 8004898 <_free_r+0x4c>
 8004894:	42a3      	cmp	r3, r4
 8004896:	d9fa      	bls.n	800488e <_free_r+0x42>
 8004898:	6811      	ldr	r1, [r2, #0]
 800489a:	1850      	adds	r0, r2, r1
 800489c:	42a0      	cmp	r0, r4
 800489e:	d10b      	bne.n	80048b8 <_free_r+0x6c>
 80048a0:	6820      	ldr	r0, [r4, #0]
 80048a2:	4401      	add	r1, r0
 80048a4:	1850      	adds	r0, r2, r1
 80048a6:	4283      	cmp	r3, r0
 80048a8:	6011      	str	r1, [r2, #0]
 80048aa:	d1e0      	bne.n	800486e <_free_r+0x22>
 80048ac:	6818      	ldr	r0, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	6053      	str	r3, [r2, #4]
 80048b2:	4408      	add	r0, r1
 80048b4:	6010      	str	r0, [r2, #0]
 80048b6:	e7da      	b.n	800486e <_free_r+0x22>
 80048b8:	d902      	bls.n	80048c0 <_free_r+0x74>
 80048ba:	230c      	movs	r3, #12
 80048bc:	602b      	str	r3, [r5, #0]
 80048be:	e7d6      	b.n	800486e <_free_r+0x22>
 80048c0:	6820      	ldr	r0, [r4, #0]
 80048c2:	1821      	adds	r1, r4, r0
 80048c4:	428b      	cmp	r3, r1
 80048c6:	bf04      	itt	eq
 80048c8:	6819      	ldreq	r1, [r3, #0]
 80048ca:	685b      	ldreq	r3, [r3, #4]
 80048cc:	6063      	str	r3, [r4, #4]
 80048ce:	bf04      	itt	eq
 80048d0:	1809      	addeq	r1, r1, r0
 80048d2:	6021      	streq	r1, [r4, #0]
 80048d4:	6054      	str	r4, [r2, #4]
 80048d6:	e7ca      	b.n	800486e <_free_r+0x22>
 80048d8:	bd38      	pop	{r3, r4, r5, pc}
 80048da:	bf00      	nop
 80048dc:	200002d0 	.word	0x200002d0

080048e0 <sbrk_aligned>:
 80048e0:	b570      	push	{r4, r5, r6, lr}
 80048e2:	4e0f      	ldr	r6, [pc, #60]	@ (8004920 <sbrk_aligned+0x40>)
 80048e4:	460c      	mov	r4, r1
 80048e6:	6831      	ldr	r1, [r6, #0]
 80048e8:	4605      	mov	r5, r0
 80048ea:	b911      	cbnz	r1, 80048f2 <sbrk_aligned+0x12>
 80048ec:	f000 f9d6 	bl	8004c9c <_sbrk_r>
 80048f0:	6030      	str	r0, [r6, #0]
 80048f2:	4621      	mov	r1, r4
 80048f4:	4628      	mov	r0, r5
 80048f6:	f000 f9d1 	bl	8004c9c <_sbrk_r>
 80048fa:	1c43      	adds	r3, r0, #1
 80048fc:	d103      	bne.n	8004906 <sbrk_aligned+0x26>
 80048fe:	f04f 34ff 	mov.w	r4, #4294967295
 8004902:	4620      	mov	r0, r4
 8004904:	bd70      	pop	{r4, r5, r6, pc}
 8004906:	1cc4      	adds	r4, r0, #3
 8004908:	f024 0403 	bic.w	r4, r4, #3
 800490c:	42a0      	cmp	r0, r4
 800490e:	d0f8      	beq.n	8004902 <sbrk_aligned+0x22>
 8004910:	1a21      	subs	r1, r4, r0
 8004912:	4628      	mov	r0, r5
 8004914:	f000 f9c2 	bl	8004c9c <_sbrk_r>
 8004918:	3001      	adds	r0, #1
 800491a:	d1f2      	bne.n	8004902 <sbrk_aligned+0x22>
 800491c:	e7ef      	b.n	80048fe <sbrk_aligned+0x1e>
 800491e:	bf00      	nop
 8004920:	200002cc 	.word	0x200002cc

08004924 <_malloc_r>:
 8004924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004928:	1ccd      	adds	r5, r1, #3
 800492a:	f025 0503 	bic.w	r5, r5, #3
 800492e:	3508      	adds	r5, #8
 8004930:	2d0c      	cmp	r5, #12
 8004932:	bf38      	it	cc
 8004934:	250c      	movcc	r5, #12
 8004936:	2d00      	cmp	r5, #0
 8004938:	4606      	mov	r6, r0
 800493a:	db01      	blt.n	8004940 <_malloc_r+0x1c>
 800493c:	42a9      	cmp	r1, r5
 800493e:	d904      	bls.n	800494a <_malloc_r+0x26>
 8004940:	230c      	movs	r3, #12
 8004942:	6033      	str	r3, [r6, #0]
 8004944:	2000      	movs	r0, #0
 8004946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800494a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a20 <_malloc_r+0xfc>
 800494e:	f000 f869 	bl	8004a24 <__malloc_lock>
 8004952:	f8d8 3000 	ldr.w	r3, [r8]
 8004956:	461c      	mov	r4, r3
 8004958:	bb44      	cbnz	r4, 80049ac <_malloc_r+0x88>
 800495a:	4629      	mov	r1, r5
 800495c:	4630      	mov	r0, r6
 800495e:	f7ff ffbf 	bl	80048e0 <sbrk_aligned>
 8004962:	1c43      	adds	r3, r0, #1
 8004964:	4604      	mov	r4, r0
 8004966:	d158      	bne.n	8004a1a <_malloc_r+0xf6>
 8004968:	f8d8 4000 	ldr.w	r4, [r8]
 800496c:	4627      	mov	r7, r4
 800496e:	2f00      	cmp	r7, #0
 8004970:	d143      	bne.n	80049fa <_malloc_r+0xd6>
 8004972:	2c00      	cmp	r4, #0
 8004974:	d04b      	beq.n	8004a0e <_malloc_r+0xea>
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	4639      	mov	r1, r7
 800497a:	4630      	mov	r0, r6
 800497c:	eb04 0903 	add.w	r9, r4, r3
 8004980:	f000 f98c 	bl	8004c9c <_sbrk_r>
 8004984:	4581      	cmp	r9, r0
 8004986:	d142      	bne.n	8004a0e <_malloc_r+0xea>
 8004988:	6821      	ldr	r1, [r4, #0]
 800498a:	1a6d      	subs	r5, r5, r1
 800498c:	4629      	mov	r1, r5
 800498e:	4630      	mov	r0, r6
 8004990:	f7ff ffa6 	bl	80048e0 <sbrk_aligned>
 8004994:	3001      	adds	r0, #1
 8004996:	d03a      	beq.n	8004a0e <_malloc_r+0xea>
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	442b      	add	r3, r5
 800499c:	6023      	str	r3, [r4, #0]
 800499e:	f8d8 3000 	ldr.w	r3, [r8]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	bb62      	cbnz	r2, 8004a00 <_malloc_r+0xdc>
 80049a6:	f8c8 7000 	str.w	r7, [r8]
 80049aa:	e00f      	b.n	80049cc <_malloc_r+0xa8>
 80049ac:	6822      	ldr	r2, [r4, #0]
 80049ae:	1b52      	subs	r2, r2, r5
 80049b0:	d420      	bmi.n	80049f4 <_malloc_r+0xd0>
 80049b2:	2a0b      	cmp	r2, #11
 80049b4:	d917      	bls.n	80049e6 <_malloc_r+0xc2>
 80049b6:	1961      	adds	r1, r4, r5
 80049b8:	42a3      	cmp	r3, r4
 80049ba:	6025      	str	r5, [r4, #0]
 80049bc:	bf18      	it	ne
 80049be:	6059      	strne	r1, [r3, #4]
 80049c0:	6863      	ldr	r3, [r4, #4]
 80049c2:	bf08      	it	eq
 80049c4:	f8c8 1000 	streq.w	r1, [r8]
 80049c8:	5162      	str	r2, [r4, r5]
 80049ca:	604b      	str	r3, [r1, #4]
 80049cc:	4630      	mov	r0, r6
 80049ce:	f000 f82f 	bl	8004a30 <__malloc_unlock>
 80049d2:	f104 000b 	add.w	r0, r4, #11
 80049d6:	1d23      	adds	r3, r4, #4
 80049d8:	f020 0007 	bic.w	r0, r0, #7
 80049dc:	1ac2      	subs	r2, r0, r3
 80049de:	bf1c      	itt	ne
 80049e0:	1a1b      	subne	r3, r3, r0
 80049e2:	50a3      	strne	r3, [r4, r2]
 80049e4:	e7af      	b.n	8004946 <_malloc_r+0x22>
 80049e6:	6862      	ldr	r2, [r4, #4]
 80049e8:	42a3      	cmp	r3, r4
 80049ea:	bf0c      	ite	eq
 80049ec:	f8c8 2000 	streq.w	r2, [r8]
 80049f0:	605a      	strne	r2, [r3, #4]
 80049f2:	e7eb      	b.n	80049cc <_malloc_r+0xa8>
 80049f4:	4623      	mov	r3, r4
 80049f6:	6864      	ldr	r4, [r4, #4]
 80049f8:	e7ae      	b.n	8004958 <_malloc_r+0x34>
 80049fa:	463c      	mov	r4, r7
 80049fc:	687f      	ldr	r7, [r7, #4]
 80049fe:	e7b6      	b.n	800496e <_malloc_r+0x4a>
 8004a00:	461a      	mov	r2, r3
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	42a3      	cmp	r3, r4
 8004a06:	d1fb      	bne.n	8004a00 <_malloc_r+0xdc>
 8004a08:	2300      	movs	r3, #0
 8004a0a:	6053      	str	r3, [r2, #4]
 8004a0c:	e7de      	b.n	80049cc <_malloc_r+0xa8>
 8004a0e:	230c      	movs	r3, #12
 8004a10:	6033      	str	r3, [r6, #0]
 8004a12:	4630      	mov	r0, r6
 8004a14:	f000 f80c 	bl	8004a30 <__malloc_unlock>
 8004a18:	e794      	b.n	8004944 <_malloc_r+0x20>
 8004a1a:	6005      	str	r5, [r0, #0]
 8004a1c:	e7d6      	b.n	80049cc <_malloc_r+0xa8>
 8004a1e:	bf00      	nop
 8004a20:	200002d0 	.word	0x200002d0

08004a24 <__malloc_lock>:
 8004a24:	4801      	ldr	r0, [pc, #4]	@ (8004a2c <__malloc_lock+0x8>)
 8004a26:	f7ff bf0e 	b.w	8004846 <__retarget_lock_acquire_recursive>
 8004a2a:	bf00      	nop
 8004a2c:	200002c8 	.word	0x200002c8

08004a30 <__malloc_unlock>:
 8004a30:	4801      	ldr	r0, [pc, #4]	@ (8004a38 <__malloc_unlock+0x8>)
 8004a32:	f7ff bf09 	b.w	8004848 <__retarget_lock_release_recursive>
 8004a36:	bf00      	nop
 8004a38:	200002c8 	.word	0x200002c8

08004a3c <__sflush_r>:
 8004a3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a44:	0716      	lsls	r6, r2, #28
 8004a46:	4605      	mov	r5, r0
 8004a48:	460c      	mov	r4, r1
 8004a4a:	d454      	bmi.n	8004af6 <__sflush_r+0xba>
 8004a4c:	684b      	ldr	r3, [r1, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	dc02      	bgt.n	8004a58 <__sflush_r+0x1c>
 8004a52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	dd48      	ble.n	8004aea <__sflush_r+0xae>
 8004a58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a5a:	2e00      	cmp	r6, #0
 8004a5c:	d045      	beq.n	8004aea <__sflush_r+0xae>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004a64:	682f      	ldr	r7, [r5, #0]
 8004a66:	6a21      	ldr	r1, [r4, #32]
 8004a68:	602b      	str	r3, [r5, #0]
 8004a6a:	d030      	beq.n	8004ace <__sflush_r+0x92>
 8004a6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a6e:	89a3      	ldrh	r3, [r4, #12]
 8004a70:	0759      	lsls	r1, r3, #29
 8004a72:	d505      	bpl.n	8004a80 <__sflush_r+0x44>
 8004a74:	6863      	ldr	r3, [r4, #4]
 8004a76:	1ad2      	subs	r2, r2, r3
 8004a78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a7a:	b10b      	cbz	r3, 8004a80 <__sflush_r+0x44>
 8004a7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a7e:	1ad2      	subs	r2, r2, r3
 8004a80:	2300      	movs	r3, #0
 8004a82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a84:	6a21      	ldr	r1, [r4, #32]
 8004a86:	4628      	mov	r0, r5
 8004a88:	47b0      	blx	r6
 8004a8a:	1c43      	adds	r3, r0, #1
 8004a8c:	89a3      	ldrh	r3, [r4, #12]
 8004a8e:	d106      	bne.n	8004a9e <__sflush_r+0x62>
 8004a90:	6829      	ldr	r1, [r5, #0]
 8004a92:	291d      	cmp	r1, #29
 8004a94:	d82b      	bhi.n	8004aee <__sflush_r+0xb2>
 8004a96:	4a2a      	ldr	r2, [pc, #168]	@ (8004b40 <__sflush_r+0x104>)
 8004a98:	410a      	asrs	r2, r1
 8004a9a:	07d6      	lsls	r6, r2, #31
 8004a9c:	d427      	bmi.n	8004aee <__sflush_r+0xb2>
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	6062      	str	r2, [r4, #4]
 8004aa2:	04d9      	lsls	r1, r3, #19
 8004aa4:	6922      	ldr	r2, [r4, #16]
 8004aa6:	6022      	str	r2, [r4, #0]
 8004aa8:	d504      	bpl.n	8004ab4 <__sflush_r+0x78>
 8004aaa:	1c42      	adds	r2, r0, #1
 8004aac:	d101      	bne.n	8004ab2 <__sflush_r+0x76>
 8004aae:	682b      	ldr	r3, [r5, #0]
 8004ab0:	b903      	cbnz	r3, 8004ab4 <__sflush_r+0x78>
 8004ab2:	6560      	str	r0, [r4, #84]	@ 0x54
 8004ab4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ab6:	602f      	str	r7, [r5, #0]
 8004ab8:	b1b9      	cbz	r1, 8004aea <__sflush_r+0xae>
 8004aba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004abe:	4299      	cmp	r1, r3
 8004ac0:	d002      	beq.n	8004ac8 <__sflush_r+0x8c>
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	f7ff fec2 	bl	800484c <_free_r>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	6363      	str	r3, [r4, #52]	@ 0x34
 8004acc:	e00d      	b.n	8004aea <__sflush_r+0xae>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	47b0      	blx	r6
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	1c50      	adds	r0, r2, #1
 8004ad8:	d1c9      	bne.n	8004a6e <__sflush_r+0x32>
 8004ada:	682b      	ldr	r3, [r5, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0c6      	beq.n	8004a6e <__sflush_r+0x32>
 8004ae0:	2b1d      	cmp	r3, #29
 8004ae2:	d001      	beq.n	8004ae8 <__sflush_r+0xac>
 8004ae4:	2b16      	cmp	r3, #22
 8004ae6:	d11e      	bne.n	8004b26 <__sflush_r+0xea>
 8004ae8:	602f      	str	r7, [r5, #0]
 8004aea:	2000      	movs	r0, #0
 8004aec:	e022      	b.n	8004b34 <__sflush_r+0xf8>
 8004aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004af2:	b21b      	sxth	r3, r3
 8004af4:	e01b      	b.n	8004b2e <__sflush_r+0xf2>
 8004af6:	690f      	ldr	r7, [r1, #16]
 8004af8:	2f00      	cmp	r7, #0
 8004afa:	d0f6      	beq.n	8004aea <__sflush_r+0xae>
 8004afc:	0793      	lsls	r3, r2, #30
 8004afe:	680e      	ldr	r6, [r1, #0]
 8004b00:	bf08      	it	eq
 8004b02:	694b      	ldreq	r3, [r1, #20]
 8004b04:	600f      	str	r7, [r1, #0]
 8004b06:	bf18      	it	ne
 8004b08:	2300      	movne	r3, #0
 8004b0a:	eba6 0807 	sub.w	r8, r6, r7
 8004b0e:	608b      	str	r3, [r1, #8]
 8004b10:	f1b8 0f00 	cmp.w	r8, #0
 8004b14:	dde9      	ble.n	8004aea <__sflush_r+0xae>
 8004b16:	6a21      	ldr	r1, [r4, #32]
 8004b18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004b1a:	4643      	mov	r3, r8
 8004b1c:	463a      	mov	r2, r7
 8004b1e:	4628      	mov	r0, r5
 8004b20:	47b0      	blx	r6
 8004b22:	2800      	cmp	r0, #0
 8004b24:	dc08      	bgt.n	8004b38 <__sflush_r+0xfc>
 8004b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b2e:	81a3      	strh	r3, [r4, #12]
 8004b30:	f04f 30ff 	mov.w	r0, #4294967295
 8004b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b38:	4407      	add	r7, r0
 8004b3a:	eba8 0800 	sub.w	r8, r8, r0
 8004b3e:	e7e7      	b.n	8004b10 <__sflush_r+0xd4>
 8004b40:	dfbffffe 	.word	0xdfbffffe

08004b44 <_fflush_r>:
 8004b44:	b538      	push	{r3, r4, r5, lr}
 8004b46:	690b      	ldr	r3, [r1, #16]
 8004b48:	4605      	mov	r5, r0
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	b913      	cbnz	r3, 8004b54 <_fflush_r+0x10>
 8004b4e:	2500      	movs	r5, #0
 8004b50:	4628      	mov	r0, r5
 8004b52:	bd38      	pop	{r3, r4, r5, pc}
 8004b54:	b118      	cbz	r0, 8004b5e <_fflush_r+0x1a>
 8004b56:	6a03      	ldr	r3, [r0, #32]
 8004b58:	b90b      	cbnz	r3, 8004b5e <_fflush_r+0x1a>
 8004b5a:	f7ff fc8f 	bl	800447c <__sinit>
 8004b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0f3      	beq.n	8004b4e <_fflush_r+0xa>
 8004b66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b68:	07d0      	lsls	r0, r2, #31
 8004b6a:	d404      	bmi.n	8004b76 <_fflush_r+0x32>
 8004b6c:	0599      	lsls	r1, r3, #22
 8004b6e:	d402      	bmi.n	8004b76 <_fflush_r+0x32>
 8004b70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b72:	f7ff fe68 	bl	8004846 <__retarget_lock_acquire_recursive>
 8004b76:	4628      	mov	r0, r5
 8004b78:	4621      	mov	r1, r4
 8004b7a:	f7ff ff5f 	bl	8004a3c <__sflush_r>
 8004b7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b80:	07da      	lsls	r2, r3, #31
 8004b82:	4605      	mov	r5, r0
 8004b84:	d4e4      	bmi.n	8004b50 <_fflush_r+0xc>
 8004b86:	89a3      	ldrh	r3, [r4, #12]
 8004b88:	059b      	lsls	r3, r3, #22
 8004b8a:	d4e1      	bmi.n	8004b50 <_fflush_r+0xc>
 8004b8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b8e:	f7ff fe5b 	bl	8004848 <__retarget_lock_release_recursive>
 8004b92:	e7dd      	b.n	8004b50 <_fflush_r+0xc>

08004b94 <__swhatbuf_r>:
 8004b94:	b570      	push	{r4, r5, r6, lr}
 8004b96:	460c      	mov	r4, r1
 8004b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b9c:	2900      	cmp	r1, #0
 8004b9e:	b096      	sub	sp, #88	@ 0x58
 8004ba0:	4615      	mov	r5, r2
 8004ba2:	461e      	mov	r6, r3
 8004ba4:	da0d      	bge.n	8004bc2 <__swhatbuf_r+0x2e>
 8004ba6:	89a3      	ldrh	r3, [r4, #12]
 8004ba8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004bac:	f04f 0100 	mov.w	r1, #0
 8004bb0:	bf14      	ite	ne
 8004bb2:	2340      	movne	r3, #64	@ 0x40
 8004bb4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004bb8:	2000      	movs	r0, #0
 8004bba:	6031      	str	r1, [r6, #0]
 8004bbc:	602b      	str	r3, [r5, #0]
 8004bbe:	b016      	add	sp, #88	@ 0x58
 8004bc0:	bd70      	pop	{r4, r5, r6, pc}
 8004bc2:	466a      	mov	r2, sp
 8004bc4:	f000 f848 	bl	8004c58 <_fstat_r>
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	dbec      	blt.n	8004ba6 <__swhatbuf_r+0x12>
 8004bcc:	9901      	ldr	r1, [sp, #4]
 8004bce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004bd2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004bd6:	4259      	negs	r1, r3
 8004bd8:	4159      	adcs	r1, r3
 8004bda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bde:	e7eb      	b.n	8004bb8 <__swhatbuf_r+0x24>

08004be0 <__smakebuf_r>:
 8004be0:	898b      	ldrh	r3, [r1, #12]
 8004be2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004be4:	079d      	lsls	r5, r3, #30
 8004be6:	4606      	mov	r6, r0
 8004be8:	460c      	mov	r4, r1
 8004bea:	d507      	bpl.n	8004bfc <__smakebuf_r+0x1c>
 8004bec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004bf0:	6023      	str	r3, [r4, #0]
 8004bf2:	6123      	str	r3, [r4, #16]
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	6163      	str	r3, [r4, #20]
 8004bf8:	b003      	add	sp, #12
 8004bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bfc:	ab01      	add	r3, sp, #4
 8004bfe:	466a      	mov	r2, sp
 8004c00:	f7ff ffc8 	bl	8004b94 <__swhatbuf_r>
 8004c04:	9f00      	ldr	r7, [sp, #0]
 8004c06:	4605      	mov	r5, r0
 8004c08:	4639      	mov	r1, r7
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	f7ff fe8a 	bl	8004924 <_malloc_r>
 8004c10:	b948      	cbnz	r0, 8004c26 <__smakebuf_r+0x46>
 8004c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c16:	059a      	lsls	r2, r3, #22
 8004c18:	d4ee      	bmi.n	8004bf8 <__smakebuf_r+0x18>
 8004c1a:	f023 0303 	bic.w	r3, r3, #3
 8004c1e:	f043 0302 	orr.w	r3, r3, #2
 8004c22:	81a3      	strh	r3, [r4, #12]
 8004c24:	e7e2      	b.n	8004bec <__smakebuf_r+0xc>
 8004c26:	89a3      	ldrh	r3, [r4, #12]
 8004c28:	6020      	str	r0, [r4, #0]
 8004c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c2e:	81a3      	strh	r3, [r4, #12]
 8004c30:	9b01      	ldr	r3, [sp, #4]
 8004c32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004c36:	b15b      	cbz	r3, 8004c50 <__smakebuf_r+0x70>
 8004c38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c3c:	4630      	mov	r0, r6
 8004c3e:	f000 f81d 	bl	8004c7c <_isatty_r>
 8004c42:	b128      	cbz	r0, 8004c50 <__smakebuf_r+0x70>
 8004c44:	89a3      	ldrh	r3, [r4, #12]
 8004c46:	f023 0303 	bic.w	r3, r3, #3
 8004c4a:	f043 0301 	orr.w	r3, r3, #1
 8004c4e:	81a3      	strh	r3, [r4, #12]
 8004c50:	89a3      	ldrh	r3, [r4, #12]
 8004c52:	431d      	orrs	r5, r3
 8004c54:	81a5      	strh	r5, [r4, #12]
 8004c56:	e7cf      	b.n	8004bf8 <__smakebuf_r+0x18>

08004c58 <_fstat_r>:
 8004c58:	b538      	push	{r3, r4, r5, lr}
 8004c5a:	4d07      	ldr	r5, [pc, #28]	@ (8004c78 <_fstat_r+0x20>)
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	4604      	mov	r4, r0
 8004c60:	4608      	mov	r0, r1
 8004c62:	4611      	mov	r1, r2
 8004c64:	602b      	str	r3, [r5, #0]
 8004c66:	f7fb ff92 	bl	8000b8e <_fstat>
 8004c6a:	1c43      	adds	r3, r0, #1
 8004c6c:	d102      	bne.n	8004c74 <_fstat_r+0x1c>
 8004c6e:	682b      	ldr	r3, [r5, #0]
 8004c70:	b103      	cbz	r3, 8004c74 <_fstat_r+0x1c>
 8004c72:	6023      	str	r3, [r4, #0]
 8004c74:	bd38      	pop	{r3, r4, r5, pc}
 8004c76:	bf00      	nop
 8004c78:	200002c4 	.word	0x200002c4

08004c7c <_isatty_r>:
 8004c7c:	b538      	push	{r3, r4, r5, lr}
 8004c7e:	4d06      	ldr	r5, [pc, #24]	@ (8004c98 <_isatty_r+0x1c>)
 8004c80:	2300      	movs	r3, #0
 8004c82:	4604      	mov	r4, r0
 8004c84:	4608      	mov	r0, r1
 8004c86:	602b      	str	r3, [r5, #0]
 8004c88:	f7fb ff91 	bl	8000bae <_isatty>
 8004c8c:	1c43      	adds	r3, r0, #1
 8004c8e:	d102      	bne.n	8004c96 <_isatty_r+0x1a>
 8004c90:	682b      	ldr	r3, [r5, #0]
 8004c92:	b103      	cbz	r3, 8004c96 <_isatty_r+0x1a>
 8004c94:	6023      	str	r3, [r4, #0]
 8004c96:	bd38      	pop	{r3, r4, r5, pc}
 8004c98:	200002c4 	.word	0x200002c4

08004c9c <_sbrk_r>:
 8004c9c:	b538      	push	{r3, r4, r5, lr}
 8004c9e:	4d06      	ldr	r5, [pc, #24]	@ (8004cb8 <_sbrk_r+0x1c>)
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	4608      	mov	r0, r1
 8004ca6:	602b      	str	r3, [r5, #0]
 8004ca8:	f7fb ff9a 	bl	8000be0 <_sbrk>
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	d102      	bne.n	8004cb6 <_sbrk_r+0x1a>
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	b103      	cbz	r3, 8004cb6 <_sbrk_r+0x1a>
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	bd38      	pop	{r3, r4, r5, pc}
 8004cb8:	200002c4 	.word	0x200002c4

08004cbc <_init>:
 8004cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cbe:	bf00      	nop
 8004cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc2:	bc08      	pop	{r3}
 8004cc4:	469e      	mov	lr, r3
 8004cc6:	4770      	bx	lr

08004cc8 <_fini>:
 8004cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cca:	bf00      	nop
 8004ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cce:	bc08      	pop	{r3}
 8004cd0:	469e      	mov	lr, r3
 8004cd2:	4770      	bx	lr
